
(********************************************************************
	@name Coq declarations for metamodel: <Relational>
	@date 2021/10/13 22:19:56
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import String.
Require Import Bool.
Require Import List.      (* sequence *)
Require Import Multiset.  (* bag *)
Require Import ListSet.   (* set *)
Require Import Omega.
Require Import Coq.Logic.Eqdep_dec.

Require Import core.EqDec.
Require Import core.utils.Utils.
Require Import core.Metamodel.
Require Import core.modeling.ModelingMetamodel.
Require Import core.Model.
Require Import core.utils.CpdtTactics.

(* Base types *)
Inductive Table : Set :=
  BuildTable :
  (* id *) nat ->
  (* name *) string ->
  Table.
  
Inductive Column : Set :=
  BuildColumn :
  (* id *) nat ->
  (* name *) string ->
  Column.
  

Inductive TableColumns : Set :=
   BuildTableColumns :
   Table ->
   list Column ->
   TableColumns.

Inductive ColumnReference : Set :=
   BuildColumnReference :
   Column ->
   Table ->
   ColumnReference.



(* Accessors *)
Definition Table_getId (t : Table) : nat :=
  match t with BuildTable  id name  => id end.
Definition Table_getName (t : Table) : string :=
  match t with BuildTable  id name  => name end.
 
Definition Column_getId (c : Column) : nat :=
  match c with BuildColumn  id name  => id end.
Definition Column_getName (c : Column) : string :=
  match c with BuildColumn  id name  => name end.
 


		
(* Meta-types *)
Inductive RelationalMetamodel_EClass : Set :=
  | TableEClass
  | ColumnEClass
.

Definition RelationalMetamodel_getTypeByEClass (reec_arg : RelationalMetamodel_EClass) : Set :=
  match reec_arg with
    | TableEClass => Table
    | ColumnEClass => Column
  end.	

Definition RelationalMetamodel_getEAttributeTypesByEClass (reec_arg : RelationalMetamodel_EClass) : Set :=
  match reec_arg with
    | TableEClass => 
    (nat * string)
    | ColumnEClass => 
    (nat * string)
  end.

Inductive RelationalMetamodel_EReference : Set :=
| TableColumnsEReference
| ColumnReferenceEReference
.

Definition RelationalMetamodel_getTypeByEReference (reer_arg : RelationalMetamodel_EReference) : Set :=
  match reer_arg with
| TableColumnsEReference => TableColumns
| ColumnReferenceEReference => ColumnReference
  end.

Definition RelationalMetamodel_getERoleTypesByEReference (reer_arg : RelationalMetamodel_EReference) : Set :=
  match reer_arg with
| TableColumnsEReference => (Table * list Column)
| ColumnReferenceEReference => (Column * Table)
  end.

(* Generic types *)





Inductive RelationalMetamodel_EObject : Set :=
 | Build_RelationalMetamodel_EObject : 
    forall (reec_arg: RelationalMetamodel_EClass), (RelationalMetamodel_getTypeByEClass reec_arg) -> RelationalMetamodel_EObject.

Inductive RelationalMetamodel_ELink : Set :=
 | Build_RelationalMetamodel_ELink : 
    forall (reer_arg:RelationalMetamodel_EReference), (RelationalMetamodel_getTypeByEReference reer_arg) -> RelationalMetamodel_ELink.

(* Reflective functions *)

Lemma RelationalMetamodel_eqEClass_dec : 
 forall (reec_arg1:RelationalMetamodel_EClass) (reec_arg2:RelationalMetamodel_EClass), { reec_arg1 = reec_arg2 } + { reec_arg1 <> reec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma RelationalMetamodel_eqEReference_dec : 
 forall (reer_arg1:RelationalMetamodel_EReference) (reer_arg2:RelationalMetamodel_EReference), { reer_arg1 = reer_arg2 } + { reer_arg1 <> reer_arg2 }.
Proof. repeat decide equality. Defined.

Definition RelationalMetamodel_getEClass (reeo_arg : RelationalMetamodel_EObject) : RelationalMetamodel_EClass :=
   match reeo_arg with
  | (Build_RelationalMetamodel_EObject reeo_arg _) => reeo_arg
   end.

Definition RelationalMetamodel_getEReference (reel_arg : RelationalMetamodel_ELink) : RelationalMetamodel_EReference :=
   match reel_arg with
  | (Build_RelationalMetamodel_ELink reel_arg _) => reel_arg
   end.

Definition RelationalMetamodel_instanceOfEClass (reec_arg: RelationalMetamodel_EClass) (reeo_arg : RelationalMetamodel_EObject): bool :=
  if RelationalMetamodel_eqEClass_dec (RelationalMetamodel_getEClass reeo_arg) reec_arg then true else false.

Definition RelationalMetamodel_instanceOfEReference (reer_arg: RelationalMetamodel_EReference) (reel_arg : RelationalMetamodel_ELink): bool :=
  if RelationalMetamodel_eqEReference_dec (RelationalMetamodel_getEReference reel_arg) reer_arg then true else false.


Definition RelationalMetamodel_toEClass (reec_arg : RelationalMetamodel_EClass) (reeo_arg : RelationalMetamodel_EObject) : option (RelationalMetamodel_getTypeByEClass reec_arg).
Proof.
  destruct reeo_arg as [arg1 arg2].
  destruct (RelationalMetamodel_eqEClass_dec arg1 reec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition RelationalMetamodel_toEReference (reer_arg : RelationalMetamodel_EReference) (reel_arg : RelationalMetamodel_ELink) : option (RelationalMetamodel_getTypeByEReference reer_arg).
Proof.
  destruct reel_arg as [arg1 arg2].
  destruct (RelationalMetamodel_eqEReference_dec arg1 reer_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition RelationalMetamodel_toEObjectFromTable (ta_arg :Table) : RelationalMetamodel_EObject :=
  (Build_RelationalMetamodel_EObject TableEClass ta_arg).
Coercion RelationalMetamodel_toEObjectFromTable : Table >-> RelationalMetamodel_EObject.

Definition RelationalMetamodel_toEObjectFromColumn (co_arg :Column) : RelationalMetamodel_EObject :=
  (Build_RelationalMetamodel_EObject ColumnEClass co_arg).
Coercion RelationalMetamodel_toEObjectFromColumn : Column >-> RelationalMetamodel_EObject.


(** Metamodel Type Class Instaniation **)
Definition RelationalMetamodel_toEObject (reeo_arg : RelationalMetamodel_EObject) : RelationalMetamodel_EObject := reeo_arg.
Definition RelationalMetamodel_toELink (reel_arg : RelationalMetamodel_ELink) : RelationalMetamodel_ELink := reel_arg.
Definition RelationalModel := Model RelationalMetamodel_EObject RelationalMetamodel_ELink.

Definition RelationalMetamodel_toEObjectOfEClass (reec_arg: RelationalMetamodel_EClass) (t: RelationalMetamodel_getTypeByEClass reec_arg) : RelationalMetamodel_EObject :=
  (Build_RelationalMetamodel_EObject reec_arg t).

Definition RelationalMetamodel_toELinkOfEReference (reer_arg: RelationalMetamodel_EReference) (t: RelationalMetamodel_getTypeByEReference reer_arg) : RelationalMetamodel_ELink :=
		  (Build_RelationalMetamodel_ELink reer_arg t).


(* Accessors on model *)
(* Equality for Types *)
(*? We currently define eq for Eclass on their fist attribute *)
Definition beq_Table (ta_arg1 : Table) (ta_arg2 : Table) : bool :=
( beq_nat (Table_getId ta_arg1) (Table_getId ta_arg2) ) && 
( beq_string (Table_getName ta_arg1) (Table_getName ta_arg2) )
.

Definition beq_Column (co_arg1 : Column) (co_arg2 : Column) : bool :=
( beq_nat (Column_getId co_arg1) (Column_getId co_arg2) ) && 
( beq_string (Column_getName co_arg1) (Column_getName co_arg2) )
.


Definition beq_RelationalMetamodel_EObject (c1 : RelationalMetamodel_EObject) (c2 : RelationalMetamodel_EObject) : bool :=
  match c1, c2 with
  | Build_RelationalMetamodel_EObject TableEClass o1, Build_RelationalMetamodel_EObject TableEClass o2 => beq_Table o1 o2
  | Build_RelationalMetamodel_EObject ColumnEClass o1, Build_RelationalMetamodel_EObject ColumnEClass o2 => beq_Column o1 o2
  | _, _ => false
  end.
  


Fixpoint Table_getColumnsOnLinks (ta_arg : Table) (l : list RelationalMetamodel_ELink) : option (list Column) :=
match l with
| (Build_RelationalMetamodel_ELink TableColumnsEReference (BuildTableColumns Table_ctr columns_ctr)) :: l' => 
	  if beq_Table Table_ctr ta_arg then Some columns_ctr else Table_getColumnsOnLinks ta_arg l'
| _ :: l' => Table_getColumnsOnLinks ta_arg l'
| nil => None
end.

Definition Table_getColumns (ta_arg : Table) (m : RelationalModel) : option (list Column) :=
  Table_getColumnsOnLinks ta_arg (@allModelLinks _ _ m).

Fixpoint Column_getReferenceOnLinks (co_arg : Column) (l : list RelationalMetamodel_ELink) : option (Table) :=
match l with
| (Build_RelationalMetamodel_ELink ColumnReferenceEReference (BuildColumnReference Column_ctr reference_ctr)) :: l' => 
	  if beq_Column Column_ctr co_arg then Some reference_ctr else Column_getReferenceOnLinks co_arg l'
| _ :: l' => Column_getReferenceOnLinks co_arg l'
| nil => None
end.

Definition Column_getReference (co_arg : Column) (m : RelationalModel) : option (Table) :=
  Column_getReferenceOnLinks co_arg (@allModelLinks _ _ m).


(* Typeclass Instances *)

Instance RelationalMetamodel_ElementSum : Sum RelationalMetamodel_EObject RelationalMetamodel_EClass :=
{
	denoteSubType := RelationalMetamodel_getTypeByEClass;
	toSubType := RelationalMetamodel_toEClass;
	toSumType := RelationalMetamodel_toEObjectOfEClass;
}.

Instance RelationalMetamodel_LinkSum : Sum RelationalMetamodel_ELink RelationalMetamodel_EReference :=
{
	denoteSubType := RelationalMetamodel_getTypeByEReference;
	toSubType := RelationalMetamodel_toEReference;
	toSumType := RelationalMetamodel_toELinkOfEReference;
}.

Instance RelationalMetamodel_EqDec : EqDec RelationalMetamodel_EObject := {
    eq_b := beq_RelationalMetamodel_EObject;
}.

Instance RelationalMetamodel_Metamodel_instance : 
	Metamodel :=
{
	ModelElement := RelationalMetamodel_EObject;
	ModelLink := RelationalMetamodel_ELink;
}.

Instance RelationalMetamodel_ModelingMetamodel_instance : 
	ModelingMetamodel RelationalMetamodel_Metamodel_instance :=
{ 
    elements := RelationalMetamodel_ElementSum;
    links := RelationalMetamodel_LinkSum; 
}.

Definition maybeBuildTableColumns (t: Table) (c: option (list Column)) : option TableColumns :=
  match t, c with
  | t', Some c' => Some (BuildTableColumns t' c')
  | _, _ => None
  end.  

Definition maybeBuildColumnReference (c: Column) (t: option Table) : option ColumnReference :=
  match c, t with
  | c', Some t' => Some (BuildColumnReference c' t')
  | _, _ => None
  end.  

(* Useful lemmas *)

Lemma Relational_invert : 
  forall (reec_arg: RelationalMetamodel_EClass) (t1 t2: RelationalMetamodel_getTypeByEClass reec_arg), 
    Build_RelationalMetamodel_EObject reec_arg t1 = Build_RelationalMetamodel_EObject reec_arg t2 -> t1 = t2.
Admitted.
