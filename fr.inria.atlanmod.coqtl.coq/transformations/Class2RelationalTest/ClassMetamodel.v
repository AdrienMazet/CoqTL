
(********************************************************************
	@name Coq declarations for metamodel: <Class>
	@date 2021/10/13 22:23:24
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import String.
Require Import Bool.
Require Import List.      (* sequence *)
Require Import Multiset.  (* bag *)
Require Import ListSet.   (* set *)
Require Import Omega.
Require Import Coq.Logic.Eqdep_dec.

Require Import core.EqDec.
Require Import core.utils.Utils.
Require Import core.Metamodel.
Require Import core.modeling.ModelingMetamodel.
Require Import core.Model.
Require Import core.utils.CpdtTactics.

(* Base types *)
Inductive Class : Set :=
  BuildClass :
  (* id *) nat ->
  (* name *) string ->
  Class.
  
Inductive Attribute : Set :=
  BuildAttribute :
  (* id *) nat ->
  (* multiValued *) bool ->
  (* name *) string ->
  Attribute.
  

Inductive ClassAttributes : Set :=
   BuildClassAttributes :
   Class ->
   list Attribute ->
   ClassAttributes.

Inductive AttributeType : Set :=
   BuildAttributeType :
   Attribute ->
   Class ->
   AttributeType.



(* Accessors *)
Definition Class_getId (c : Class) : nat :=
  match c with BuildClass  id name  => id end.
Definition Class_getName (c : Class) : string :=
  match c with BuildClass  id name  => name end.
 
Definition Attribute_getId (a : Attribute) : nat :=
  match a with BuildAttribute  id multiValued name  => id end.
Definition Attribute_getMultiValued (a : Attribute) : bool :=
  match a with BuildAttribute  id multiValued name  => multiValued end.
Definition Attribute_getName (a : Attribute) : string :=
  match a with BuildAttribute  id multiValued name  => name end.
 


		
(* Meta-types *)
Inductive ClassMetamodel_EClass : Set :=
  | ClassEClass
  | AttributeEClass
.

Definition ClassMetamodel_getTypeByEClass (clec_arg : ClassMetamodel_EClass) : Set :=
  match clec_arg with
    | ClassEClass => Class
    | AttributeEClass => Attribute
  end.	

Definition ClassMetamodel_getEAttributeTypesByEClass (clec_arg : ClassMetamodel_EClass) : Set :=
  match clec_arg with
    | ClassEClass => 
    (nat * string)
    | AttributeEClass => 
    (nat * bool * string)
  end.

Inductive ClassMetamodel_EReference : Set :=
| ClassAttributesEReference
| AttributeTypeEReference
.

Definition ClassMetamodel_getTypeByEReference (cler_arg : ClassMetamodel_EReference) : Set :=
  match cler_arg with
| ClassAttributesEReference => ClassAttributes
| AttributeTypeEReference => AttributeType
  end.

Definition ClassMetamodel_getERoleTypesByEReference (cler_arg : ClassMetamodel_EReference) : Set :=
  match cler_arg with
| ClassAttributesEReference => (Class * list Attribute)
| AttributeTypeEReference => (Attribute * Class)
  end.

(* Generic types *)





Inductive ClassMetamodel_EObject : Set :=
 | Build_ClassMetamodel_EObject : 
    forall (clec_arg: ClassMetamodel_EClass), (ClassMetamodel_getTypeByEClass clec_arg) -> ClassMetamodel_EObject.

Inductive ClassMetamodel_ELink : Set :=
 | Build_ClassMetamodel_ELink : 
    forall (cler_arg:ClassMetamodel_EReference), (ClassMetamodel_getTypeByEReference cler_arg) -> ClassMetamodel_ELink.

(* Reflective functions *)

Lemma ClassMetamodel_eqEClass_dec : 
 forall (clec_arg1:ClassMetamodel_EClass) (clec_arg2:ClassMetamodel_EClass), { clec_arg1 = clec_arg2 } + { clec_arg1 <> clec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma ClassMetamodel_eqEReference_dec : 
 forall (cler_arg1:ClassMetamodel_EReference) (cler_arg2:ClassMetamodel_EReference), { cler_arg1 = cler_arg2 } + { cler_arg1 <> cler_arg2 }.
Proof. repeat decide equality. Defined.

Definition ClassMetamodel_getEClass (cleo_arg : ClassMetamodel_EObject) : ClassMetamodel_EClass :=
   match cleo_arg with
  | (Build_ClassMetamodel_EObject cleo_arg _) => cleo_arg
   end.

Definition ClassMetamodel_getEReference (clel_arg : ClassMetamodel_ELink) : ClassMetamodel_EReference :=
   match clel_arg with
  | (Build_ClassMetamodel_ELink clel_arg _) => clel_arg
   end.

Definition ClassMetamodel_instanceOfEClass (clec_arg: ClassMetamodel_EClass) (cleo_arg : ClassMetamodel_EObject): bool :=
  if ClassMetamodel_eqEClass_dec (ClassMetamodel_getEClass cleo_arg) clec_arg then true else false.

Definition ClassMetamodel_instanceOfEReference (cler_arg: ClassMetamodel_EReference) (clel_arg : ClassMetamodel_ELink): bool :=
  if ClassMetamodel_eqEReference_dec (ClassMetamodel_getEReference clel_arg) cler_arg then true else false.


Definition ClassMetamodel_toEClass (clec_arg : ClassMetamodel_EClass) (cleo_arg : ClassMetamodel_EObject) : option (ClassMetamodel_getTypeByEClass clec_arg).
Proof.
  destruct cleo_arg as [arg1 arg2].
  destruct (ClassMetamodel_eqEClass_dec arg1 clec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition ClassMetamodel_toEReference (cler_arg : ClassMetamodel_EReference) (clel_arg : ClassMetamodel_ELink) : option (ClassMetamodel_getTypeByEReference cler_arg).
Proof.
  destruct clel_arg as [arg1 arg2].
  destruct (ClassMetamodel_eqEReference_dec arg1 cler_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition ClassMetamodel_toEObjectFromClass (cl_arg :Class) : ClassMetamodel_EObject :=
  (Build_ClassMetamodel_EObject ClassEClass cl_arg).
Coercion ClassMetamodel_toEObjectFromClass : Class >-> ClassMetamodel_EObject.

Definition ClassMetamodel_toEObjectFromAttribute (at_arg :Attribute) : ClassMetamodel_EObject :=
  (Build_ClassMetamodel_EObject AttributeEClass at_arg).
Coercion ClassMetamodel_toEObjectFromAttribute : Attribute >-> ClassMetamodel_EObject.


(** Metamodel Type Class Instaniation **)
Definition ClassMetamodel_toEObject (cleo_arg : ClassMetamodel_EObject) : ClassMetamodel_EObject := cleo_arg.
Definition ClassMetamodel_toELink (clel_arg : ClassMetamodel_ELink) : ClassMetamodel_ELink := clel_arg.
Definition ClassModel := Model ClassMetamodel_EObject ClassMetamodel_ELink.

Definition ClassMetamodel_toEObjectOfEClass (clec_arg: ClassMetamodel_EClass) (t: ClassMetamodel_getTypeByEClass clec_arg) : ClassMetamodel_EObject :=
  (Build_ClassMetamodel_EObject clec_arg t).

Definition ClassMetamodel_toELinkOfEReference (cler_arg: ClassMetamodel_EReference) (t: ClassMetamodel_getTypeByEReference cler_arg) : ClassMetamodel_ELink :=
		  (Build_ClassMetamodel_ELink cler_arg t).


(* Equality for Types *)
Definition beq_Class (cl_arg1 : Class) (cl_arg2 : Class) : bool :=
( beq_nat (Class_getId cl_arg1) (Class_getId cl_arg2) ) && 
( beq_string (Class_getName cl_arg1) (Class_getName cl_arg2) )
.

Definition beq_Attribute (at_arg1 : Attribute) (at_arg2 : Attribute) : bool :=
( beq_nat (Attribute_getId at_arg1) (Attribute_getId at_arg2) ) && 
( beq_bool (Attribute_getMultiValued at_arg1) (Attribute_getMultiValued at_arg2) ) && 
( beq_string (Attribute_getName at_arg1) (Attribute_getName at_arg2) )
.


Definition beq_ClassMetamodel_EObject (c1 : ClassMetamodel_EObject) (c2 : ClassMetamodel_EObject) : bool :=
  match c1, c2 with
  | Build_ClassMetamodel_EObject ClassEClass o1, Build_ClassMetamodel_EObject ClassEClass o2 => beq_Class o1 o2
  | Build_ClassMetamodel_EObject AttributeEClass o1, Build_ClassMetamodel_EObject AttributeEClass o2 => beq_Attribute o1 o2
  | _, _ => false
  end.
  


Fixpoint Class_getAttributesOnLinks (cl_arg : Class) (l : list ClassMetamodel_ELink) : option (list Attribute) :=
match l with
| (Build_ClassMetamodel_ELink ClassAttributesEReference (BuildClassAttributes Class_ctr attributes_ctr)) :: l' => 
	  if beq_Class Class_ctr cl_arg then Some attributes_ctr else Class_getAttributesOnLinks cl_arg l'
| _ :: l' => Class_getAttributesOnLinks cl_arg l'
| nil => None
end.

Definition Class_getAttributes (cl_arg : Class) (m : ClassModel) : option (list Attribute) :=
  Class_getAttributesOnLinks cl_arg (@allModelLinks _ _ m).

Fixpoint Attribute_getTypeOnLinks (at_arg : Attribute) (l : list ClassMetamodel_ELink) : option (Class) :=
match l with
| (Build_ClassMetamodel_ELink AttributeTypeEReference (BuildAttributeType Attribute_ctr type_ctr)) :: l' => 
	  if beq_Attribute Attribute_ctr at_arg then Some type_ctr else Attribute_getTypeOnLinks at_arg l'
| _ :: l' => Attribute_getTypeOnLinks at_arg l'
| nil => None
end.

Definition Attribute_getType (at_arg : Attribute) (m : ClassModel) : option (Class) :=
  Attribute_getTypeOnLinks at_arg (@allModelLinks _ _ m).


(* Typeclass Instances *)

Instance ClassMetamodel_ElementSum : Sum ClassMetamodel_EObject ClassMetamodel_EClass :=
{
	denoteSubType := ClassMetamodel_getTypeByEClass;
	toSubType := ClassMetamodel_toEClass;
	toSumType := ClassMetamodel_toEObjectOfEClass;
}.

Instance ClassMetamodel_LinkSum : Sum ClassMetamodel_ELink ClassMetamodel_EReference :=
{
	denoteSubType := ClassMetamodel_getTypeByEReference;
	toSubType := ClassMetamodel_toEReference;
	toSumType := ClassMetamodel_toELinkOfEReference;
}.

Instance ClassMetamodel_EqDec : EqDec ClassMetamodel_EObject := {
    eq_b := beq_ClassMetamodel_EObject;
}.

Instance ClassMetamodel_Metamodel_instance : 
	Metamodel :=
{
	ModelElement := ClassMetamodel_EObject;
	ModelLink := ClassMetamodel_ELink;
}.

Instance ClassMetamodel_ModelingMetamodel_instance : 
	ModelingMetamodel ClassMetamodel_Metamodel_instance :=
{ 
    elements := ClassMetamodel_ElementSum;
    links := ClassMetamodel_LinkSum; 
}.

(* Useful lemmas *)

Lemma Class_invert : 
  forall (clec_arg: ClassMetamodel_EClass) (t1 t2: ClassMetamodel_getTypeByEClass clec_arg), 
    Build_ClassMetamodel_EObject clec_arg t1 = Build_ClassMetamodel_EObject clec_arg t2 -> t1 = t2.
Admitted.
