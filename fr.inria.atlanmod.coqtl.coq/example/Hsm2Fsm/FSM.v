
(********************************************************************
	@name Coq declarations for metamodel: <FSM>
	@date 2018/07/10 17:44:50
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import Bool.
Require Import String.
Require Import List.
Require Import Multiset.
Require Import ListSet.
Require Import Omega.
Require Import Coq.Logic.Eqdep_dec.

(* CoqTL libraries *)
Require Import core.utils.tTop.
Require Import core.Metamodel.
Require Import core.Model.

(* Base types *)
Inductive StateMachine : Set :=
  BuildStateMachine :
  (* name *) string ->
  StateMachine.
  
Inductive Transition : Set :=
  BuildTransition :
  (* label *) string ->
  Transition.
  
Inductive AbstractState : Set :=
  BuildAbstractState :
  (* name *) string ->
  AbstractState.
  
Inductive InitialState : Set :=
  BuildInitialState :
  (* name *) string ->
  InitialState.
  
Inductive RegularState : Set :=
  BuildRegularState :
  (* name *) string ->
  RegularState.
  

Inductive StateMachineTransitions : Set :=
   BuildStateMachineTransitions :
   StateMachine ->
   list Transition ->
   StateMachineTransitions.
Inductive StateMachineStates : Set :=
   BuildStateMachineStates :
   StateMachine ->
   list AbstractState ->
   StateMachineStates.

Inductive TransitionStateMachine : Set :=
   BuildTransitionStateMachine :
   Transition ->
   StateMachine ->
   TransitionStateMachine.
Inductive TransitionSource : Set :=
   BuildTransitionSource :
   Transition ->
   AbstractState ->
   TransitionSource.
Inductive TransitionTarget : Set :=
   BuildTransitionTarget :
   Transition ->
   AbstractState ->
   TransitionTarget.

Inductive AbstractStateStateMachine : Set :=
   BuildAbstractStateStateMachine :
   AbstractState ->
   StateMachine ->
   AbstractStateStateMachine.

Inductive InitialStateStateMachine : Set :=
   BuildInitialStateStateMachine :
   InitialState ->
   StateMachine ->
   InitialStateStateMachine.

Inductive RegularStateStateMachine : Set :=
   BuildRegularStateStateMachine :
   RegularState ->
   StateMachine ->
   RegularStateStateMachine.


(* Accessors *)
Definition getStateMachineName (s : StateMachine) : string :=
  match s with BuildStateMachine name  => name end.



Definition getTransitionLabel (t : Transition) : string :=
  match t with BuildTransition label  => label end.



Definition getAbstractStateName (a : AbstractState) : string :=
  match a with BuildAbstractState name  => name end.



Definition getInitialStateName (i : InitialState) : string :=
  match i with BuildInitialState name  => name end.



Definition getRegularStateName (r : RegularState) : string :=
  match r with BuildRegularState name  => name end.




(* Equality for Types *)
(**? We define eq for Eclass on their fist attribute **)
Definition beq_StateMachine (st_arg1 : StateMachine) (st_arg2 : StateMachine) : bool :=
  beq_string (getStateMachineName st_arg1) (getStateMachineName st_arg2).

Definition beq_Transition (tr_arg1 : Transition) (tr_arg2 : Transition) : bool :=
  beq_string (getTransitionLabel tr_arg1) (getTransitionLabel tr_arg2).

Definition beq_AbstractState (ab_arg1 : AbstractState) (ab_arg2 : AbstractState) : bool :=
  beq_string (getAbstractStateName ab_arg1) (getAbstractStateName ab_arg2).

Definition beq_InitialState (in_arg1 : InitialState) (in_arg2 : InitialState) : bool :=
  beq_string (getInitialStateName in_arg1) (getInitialStateName in_arg2).

Definition beq_RegularState (re_arg1 : RegularState) (re_arg2 : RegularState) : bool :=
  beq_string (getRegularStateName re_arg1) (getRegularStateName re_arg2).


(* Meta-types *)
Inductive FSMMetamodel_EClass : Set :=
  | StateMachineEClass
  | TransitionEClass
  | AbstractStateEClass
  | InitialStateEClass
  | RegularStateEClass
.

Definition FSMMetamodel_getTypeByEClass (fsec_arg : FSMMetamodel_EClass) : Set :=
  match fsec_arg with
    | StateMachineEClass => StateMachine
    | TransitionEClass => Transition
    | AbstractStateEClass => AbstractState
    | InitialStateEClass => InitialState
    | RegularStateEClass => RegularState
  end.

(**? confusing name convention **)
Definition FSMMetamodel_getEAttributeTypesByEClass (fsec_arg : FSMMetamodel_EClass) : Set :=
  match fsec_arg with
    | StateMachineEClass => (string)
    | TransitionEClass => (string)
    | AbstractStateEClass => (string)
    | InitialStateEClass => (string)
    | RegularStateEClass => (string)
  end.

Inductive FSMMetamodel_EReference : Set :=
| StateMachineTransitionsEReference
| StateMachineStatesEReference
| TransitionStateMachineEReference
| TransitionSourceEReference
| TransitionTargetEReference
| AbstractStateStateMachineEReference
| InitialStateStateMachineEReference
| RegularStateStateMachineEReference
.

Definition FSMMetamodel_getTypeByEReference (fser_arg : FSMMetamodel_EReference) : Set :=
  match fser_arg with
| StateMachineTransitionsEReference => StateMachineTransitions
| StateMachineStatesEReference => StateMachineStates
| TransitionStateMachineEReference => TransitionStateMachine
| TransitionSourceEReference => TransitionSource
| TransitionTargetEReference => TransitionTarget
| AbstractStateStateMachineEReference => AbstractStateStateMachine
| InitialStateStateMachineEReference => InitialStateStateMachine
| RegularStateStateMachineEReference => RegularStateStateMachine
  end.

(**? confusing name convention **)
Definition FSMMetamodel_getERoleTypesByEReference (fser_arg : FSMMetamodel_EReference) : Set :=
  match fser_arg with
| StateMachineTransitionsEReference => (StateMachine * list Transition)
| StateMachineStatesEReference => (StateMachine * list AbstractState)
| TransitionStateMachineEReference => (Transition * StateMachine)
| TransitionSourceEReference => (Transition * AbstractState)
| TransitionTargetEReference => (Transition * AbstractState)
| AbstractStateStateMachineEReference => (AbstractState * StateMachine)
| InitialStateStateMachineEReference => (InitialState * StateMachine)
| RegularStateStateMachineEReference => (RegularState * StateMachine)
  end.

(* Generic types *)





(**? Changed Ctr name **)
Inductive FSMMetamodel_EObject : Set :=
 | Build_FSMMetamodel_EObject : 
    forall (fsec_arg: FSMMetamodel_EClass), (FSMMetamodel_getTypeByEClass fsec_arg) -> FSMMetamodel_EObject.

Inductive FSMMetamodel_ELink : Set :=
 | Build_FSMMetamodel_ELink : 
    forall (fser_arg:FSMMetamodel_EReference), (FSMMetamodel_getTypeByEReference fser_arg) -> FSMMetamodel_ELink.

(* Reflective functions *)

Lemma FSMMetamodel_eqEClass_dec : 
 forall (fsec_arg1:FSMMetamodel_EClass) (fsec_arg2:FSMMetamodel_EClass), { fsec_arg1 = fsec_arg2 } + { fsec_arg1 <> fsec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma FSMMetamodel_eqEReference_dec : 
 forall (fser_arg1:FSMMetamodel_EReference) (fser_arg2:FSMMetamodel_EReference), { fser_arg1 = fser_arg2 } + { fser_arg1 <> fser_arg2 }.
Proof. repeat decide equality. Defined.

Definition FSMMetamodel_getEClass (fseo_arg : FSMMetamodel_EObject) : FSMMetamodel_EClass :=
   match fseo_arg with
  | (Build_FSMMetamodel_EObject fseo_arg _) => fseo_arg
   end.

Definition FSMMetamodel_getEReference (fsel_arg : FSMMetamodel_ELink) : FSMMetamodel_EReference :=
   match fsel_arg with
  | (Build_FSMMetamodel_ELink fsel_arg _) => fsel_arg
   end.

Definition FSMMetamodel_instanceOfEClass (fsec_arg: FSMMetamodel_EClass) (fseo_arg : FSMMetamodel_EObject): bool :=
  if FSMMetamodel_eqEClass_dec (FSMMetamodel_getEClass fseo_arg) fsec_arg then true else false.

Definition FSMMetamodel_instanceOfEReference (fser_arg: FSMMetamodel_EReference) (fsel_arg : FSMMetamodel_ELink): bool :=
  if FSMMetamodel_eqEReference_dec (FSMMetamodel_getEReference fsel_arg) fser_arg then true else false.

(**? confusing name convention **)

Definition FSMMetamodel_getEObjectFromEAttributeValues (fsec_arg : FSMMetamodel_EClass) : (FSMMetamodel_getEAttributeTypesByEClass fsec_arg) -> FSMMetamodel_EObject :=
  match fsec_arg with
    | StateMachineEClass => (fun (p: (string)) => (Build_FSMMetamodel_EObject StateMachineEClass (BuildStateMachine p)))
    | TransitionEClass => (fun (p: (string)) => (Build_FSMMetamodel_EObject TransitionEClass (BuildTransition p)))
    | AbstractStateEClass => (fun (p: (string)) => (Build_FSMMetamodel_EObject AbstractStateEClass (BuildAbstractState p)))
    | InitialStateEClass => (fun (p: (string)) => (Build_FSMMetamodel_EObject InitialStateEClass (BuildInitialState p)))
    | RegularStateEClass => (fun (p: (string)) => (Build_FSMMetamodel_EObject RegularStateEClass (BuildRegularState p)))
  end.

(**? confusing name convention **)
Definition FSMMetamodel_getELinkFromERoleValues (fser_arg : FSMMetamodel_EReference) : (FSMMetamodel_getERoleTypesByEReference fser_arg) -> FSMMetamodel_ELink :=
  match fser_arg with
| StateMachineTransitionsEReference => (fun (p: (StateMachine * list Transition)) => (Build_FSMMetamodel_ELink StateMachineTransitionsEReference (BuildStateMachineTransitions (fst p) (snd p))))
| StateMachineStatesEReference => (fun (p: (StateMachine * list AbstractState)) => (Build_FSMMetamodel_ELink StateMachineStatesEReference (BuildStateMachineStates (fst p) (snd p))))
| TransitionStateMachineEReference => (fun (p: (Transition * StateMachine)) => (Build_FSMMetamodel_ELink TransitionStateMachineEReference (BuildTransitionStateMachine (fst p) (snd p))))
| TransitionSourceEReference => (fun (p: (Transition * AbstractState)) => (Build_FSMMetamodel_ELink TransitionSourceEReference (BuildTransitionSource (fst p) (snd p))))
| TransitionTargetEReference => (fun (p: (Transition * AbstractState)) => (Build_FSMMetamodel_ELink TransitionTargetEReference (BuildTransitionTarget (fst p) (snd p))))
| AbstractStateStateMachineEReference => (fun (p: (AbstractState * StateMachine)) => (Build_FSMMetamodel_ELink AbstractStateStateMachineEReference (BuildAbstractStateStateMachine (fst p) (snd p))))
| InitialStateStateMachineEReference => (fun (p: (InitialState * StateMachine)) => (Build_FSMMetamodel_ELink InitialStateStateMachineEReference (BuildInitialStateStateMachine (fst p) (snd p))))
| RegularStateStateMachineEReference => (fun (p: (RegularState * StateMachine)) => (Build_FSMMetamodel_ELink RegularStateStateMachineEReference (BuildRegularStateStateMachine (fst p) (snd p))))
  end.

Definition FSMMetamodel_toEClass (fsec_arg : FSMMetamodel_EClass) (fseo_arg : FSMMetamodel_EObject) : option (FSMMetamodel_getTypeByEClass fsec_arg).
Proof.
  destruct fseo_arg as [arg1 arg2].
  destruct (FSMMetamodel_eqEClass_dec arg1 fsec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition FSMMetamodel_toEReference (fser_arg : FSMMetamodel_EReference) (fsel_arg : FSMMetamodel_ELink) : option (FSMMetamodel_getTypeByEReference fser_arg).
Proof.
  destruct fsel_arg as [arg1 arg2].
  destruct (FSMMetamodel_eqEReference_dec arg1 fser_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition FSMMetamodel_toEObjectFromStateMachine (st_arg :StateMachine) : FSMMetamodel_EObject :=
  (Build_FSMMetamodel_EObject StateMachineEClass st_arg).
Coercion FSMMetamodel_toEObjectFromStateMachine : StateMachine >-> FSMMetamodel_EObject.

Definition FSMMetamodel_toEObjectFromTransition (tr_arg :Transition) : FSMMetamodel_EObject :=
  (Build_FSMMetamodel_EObject TransitionEClass tr_arg).
Coercion FSMMetamodel_toEObjectFromTransition : Transition >-> FSMMetamodel_EObject.

Definition FSMMetamodel_toEObjectFromAbstractState (ab_arg :AbstractState) : FSMMetamodel_EObject :=
  (Build_FSMMetamodel_EObject AbstractStateEClass ab_arg).
Coercion FSMMetamodel_toEObjectFromAbstractState : AbstractState >-> FSMMetamodel_EObject.

Definition FSMMetamodel_toEObjectFromInitialState (in_arg :InitialState) : FSMMetamodel_EObject :=
  (Build_FSMMetamodel_EObject InitialStateEClass in_arg).
Coercion FSMMetamodel_toEObjectFromInitialState : InitialState >-> FSMMetamodel_EObject.

Definition FSMMetamodel_toEObjectFromRegularState (re_arg :RegularState) : FSMMetamodel_EObject :=
  (Build_FSMMetamodel_EObject RegularStateEClass re_arg).
Coercion FSMMetamodel_toEObjectFromRegularState : RegularState >-> FSMMetamodel_EObject.


(**? what are these for **)
Definition FSMMetamodel_toEObject (fseo_arg : FSMMetamodel_EObject) : FSMMetamodel_EObject := fseo_arg.
Definition FSMMetamodel_toELink (fsel_arg : FSMMetamodel_ELink) : FSMMetamodel_ELink := fsel_arg.
Definition FSMModel := Model FSMMetamodel_EObject FSMMetamodel_ELink.

Definition FSMMetamodel_toEObjectOfEClass (fsec_arg: FSMMetamodel_EClass) (t: FSMMetamodel_getTypeByEClass fsec_arg) : FSMMetamodel_EObject :=
  (Build_FSMMetamodel_EObject fsec_arg t).


Fixpoint FSMMetamodel_getStateMachineTransitionsOnLinks (st_arg : StateMachine) (l : list FSMMetamodel_ELink) : option (list Transition) :=
match l with
| (Build_FSMMetamodel_ELink StateMachineTransitionsEReference (BuildStateMachineTransitions StateMachine_ctr transitions_ctr)) :: l' => 
	  if beq_StateMachine StateMachine_ctr st_arg then Some transitions_ctr else FSMMetamodel_getStateMachineTransitionsOnLinks st_arg l'
| _ :: l' => FSMMetamodel_getStateMachineTransitionsOnLinks st_arg l'
| nil => None
end.

Definition getStateMachineTransitionsOnLinks (st_arg : StateMachine) (m : FSMModel) : option (list Transition) :=
  FSMMetamodel_getStateMachineTransitionsOnLinks st_arg (@allModelLinks _ _ m).
Fixpoint FSMMetamodel_getStateMachineStatesOnLinks (st_arg : StateMachine) (l : list FSMMetamodel_ELink) : option (list AbstractState) :=
match l with
| (Build_FSMMetamodel_ELink StateMachineStatesEReference (BuildStateMachineStates StateMachine_ctr states_ctr)) :: l' => 
	  if beq_StateMachine StateMachine_ctr st_arg then Some states_ctr else FSMMetamodel_getStateMachineStatesOnLinks st_arg l'
| _ :: l' => FSMMetamodel_getStateMachineStatesOnLinks st_arg l'
| nil => None
end.

Definition getStateMachineStatesOnLinks (st_arg : StateMachine) (m : FSMModel) : option (list AbstractState) :=
  FSMMetamodel_getStateMachineStatesOnLinks st_arg (@allModelLinks _ _ m).

Fixpoint FSMMetamodel_getTransitionStateMachineOnLinks (tr_arg : Transition) (l : list FSMMetamodel_ELink) : option (StateMachine) :=
match l with
| (Build_FSMMetamodel_ELink TransitionStateMachineEReference (BuildTransitionStateMachine Transition_ctr stateMachine_ctr)) :: l' => 
	  if beq_Transition Transition_ctr tr_arg then Some stateMachine_ctr else FSMMetamodel_getTransitionStateMachineOnLinks tr_arg l'
| _ :: l' => FSMMetamodel_getTransitionStateMachineOnLinks tr_arg l'
| nil => None
end.

Definition getTransitionStateMachineOnLinks (tr_arg : Transition) (m : FSMModel) : option (StateMachine) :=
  FSMMetamodel_getTransitionStateMachineOnLinks tr_arg (@allModelLinks _ _ m).
Fixpoint FSMMetamodel_getTransitionSourceOnLinks (tr_arg : Transition) (l : list FSMMetamodel_ELink) : option (AbstractState) :=
match l with
| (Build_FSMMetamodel_ELink TransitionSourceEReference (BuildTransitionSource Transition_ctr source_ctr)) :: l' => 
	  if beq_Transition Transition_ctr tr_arg then Some source_ctr else FSMMetamodel_getTransitionSourceOnLinks tr_arg l'
| _ :: l' => FSMMetamodel_getTransitionSourceOnLinks tr_arg l'
| nil => None
end.

Definition getTransitionSourceOnLinks (tr_arg : Transition) (m : FSMModel) : option (AbstractState) :=
  FSMMetamodel_getTransitionSourceOnLinks tr_arg (@allModelLinks _ _ m).
Fixpoint FSMMetamodel_getTransitionTargetOnLinks (tr_arg : Transition) (l : list FSMMetamodel_ELink) : option (AbstractState) :=
match l with
| (Build_FSMMetamodel_ELink TransitionTargetEReference (BuildTransitionTarget Transition_ctr target_ctr)) :: l' => 
	  if beq_Transition Transition_ctr tr_arg then Some target_ctr else FSMMetamodel_getTransitionTargetOnLinks tr_arg l'
| _ :: l' => FSMMetamodel_getTransitionTargetOnLinks tr_arg l'
| nil => None
end.

Definition getTransitionTargetOnLinks (tr_arg : Transition) (m : FSMModel) : option (AbstractState) :=
  FSMMetamodel_getTransitionTargetOnLinks tr_arg (@allModelLinks _ _ m).

Fixpoint FSMMetamodel_getAbstractStateStateMachineOnLinks (ab_arg : AbstractState) (l : list FSMMetamodel_ELink) : option (StateMachine) :=
match l with
| (Build_FSMMetamodel_ELink AbstractStateStateMachineEReference (BuildAbstractStateStateMachine AbstractState_ctr stateMachine_ctr)) :: l' => 
	  if beq_AbstractState AbstractState_ctr ab_arg then Some stateMachine_ctr else FSMMetamodel_getAbstractStateStateMachineOnLinks ab_arg l'
| _ :: l' => FSMMetamodel_getAbstractStateStateMachineOnLinks ab_arg l'
| nil => None
end.

Definition getAbstractStateStateMachineOnLinks (ab_arg : AbstractState) (m : FSMModel) : option (StateMachine) :=
  FSMMetamodel_getAbstractStateStateMachineOnLinks ab_arg (@allModelLinks _ _ m).

Fixpoint FSMMetamodel_getInitialStateStateMachineOnLinks (in_arg : InitialState) (l : list FSMMetamodel_ELink) : option (StateMachine) :=
match l with
| (Build_FSMMetamodel_ELink InitialStateStateMachineEReference (BuildInitialStateStateMachine InitialState_ctr stateMachine_ctr)) :: l' => 
	  if beq_InitialState InitialState_ctr in_arg then Some stateMachine_ctr else FSMMetamodel_getInitialStateStateMachineOnLinks in_arg l'
| _ :: l' => FSMMetamodel_getInitialStateStateMachineOnLinks in_arg l'
| nil => None
end.

Definition getInitialStateStateMachineOnLinks (in_arg : InitialState) (m : FSMModel) : option (StateMachine) :=
  FSMMetamodel_getInitialStateStateMachineOnLinks in_arg (@allModelLinks _ _ m).

Fixpoint FSMMetamodel_getRegularStateStateMachineOnLinks (re_arg : RegularState) (l : list FSMMetamodel_ELink) : option (StateMachine) :=
match l with
| (Build_FSMMetamodel_ELink RegularStateStateMachineEReference (BuildRegularStateStateMachine RegularState_ctr stateMachine_ctr)) :: l' => 
	  if beq_RegularState RegularState_ctr re_arg then Some stateMachine_ctr else FSMMetamodel_getRegularStateStateMachineOnLinks re_arg l'
| _ :: l' => FSMMetamodel_getRegularStateStateMachineOnLinks re_arg l'
| nil => None
end.

Definition getRegularStateStateMachineOnLinks (re_arg : RegularState) (m : FSMModel) : option (StateMachine) :=
  FSMMetamodel_getRegularStateStateMachineOnLinks re_arg (@allModelLinks _ _ m).


Definition FSMMetamodel_defaultInstanceOfEClass (fsec_arg: FSMMetamodel_EClass) : (FSMMetamodel_getTypeByEClass fsec_arg) :=
  match fsec_arg with
  | StateMachineEClass => (BuildStateMachine "")
  | TransitionEClass => (BuildTransition "")
  | AbstractStateEClass => (BuildAbstractState "")
  | InitialStateEClass => (BuildInitialState "")
  | RegularStateEClass => (BuildRegularState "")
  end.

(* Typeclass Instance *)
Instance FSMMetamodel : Metamodel FSMMetamodel_EObject FSMMetamodel_ELink FSMMetamodel_EClass FSMMetamodel_EReference :=
  {
    denoteModelClass := FSMMetamodel_getTypeByEClass;
    denoteModelReference := FSMMetamodel_getTypeByEReference;
    toModelClass := FSMMetamodel_toEClass;
    toModelReference := FSMMetamodel_toEReference;
    toModelElement := FSMMetamodel_toEObjectOfEClass;
    bottomModelClass := FSMMetamodel_defaultInstanceOfEClass;

    (* Theorems *)
    eqModelClass_dec := FSMMetamodel_eqEClass_dec;
    eqModelReference_dec := FSMMetamodel_eqEReference_dec;

    (* Constructors *)
    BuildModelElement := Build_FSMMetamodel_EObject;
    BuildModelLink := Build_FSMMetamodel_ELink;
  }.
  
(* Useful lemmas *)
Lemma FSM_invert : 
  forall (fsec_arg: FSMMetamodel_EClass) (t1 t2: FSMMetamodel_getTypeByEClass fsec_arg), Build_FSMMetamodel_EObject fsec_arg t1 = Build_FSMMetamodel_EObject fsec_arg t2 -> t1 = t2.
Proof.
  intros.
  inversion H.
  apply inj_pair2_eq_dec in H1.
  exact H1.
  apply FSMMetamodel_eqEClass_dec.
Qed.
