
(********************************************************************
	@name Coq declarations for metamodel: <ATOM>
	@date 2021/10/09 21:53:57
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import String.
Require Import List.      (* sequence *)
Require Import Multiset.  (* bag *)
Require Import ListSet.   (* set *)
Require Import Omega.
Require Import Bool.

Require Import core.utils.TopUtils.
Require Import core.Metamodel.
Require Import core.Model.

Require Import Coq.Logic.Eqdep_dec.

(* Base types *)
Inductive ATOM : Set :=
  BuildATOM :
  (* id *) string ->
  (* title *) string ->
  (* id *) string ->
  (* subtitle *) string ->
  (* rights *) string ->
  (* icon *) string ->
  (* logo *) string ->
  (* lastUpdate *) string ->
  ATOM.
  
Inductive Entry : Set :=
  BuildEntry :
  (* id *) string ->
  (* title *) string ->
  (* id *) string ->
  (* rights *) string ->
  (* summary *) string ->
  (* published *) string ->
  (* lastUpdate *) string ->
  Entry.
  
Inductive Source : Set :=
  BuildSource :
  (* id *) string ->
  (* id *) string ->
  (* icon *) string ->
  (* logo *) string ->
  (* rights *) string ->
  (* title *) string ->
  (* subtitle *) string ->
  (* lastUpdate *) string ->
  Source.
  
Inductive Content : Set :=
  BuildContent :
  (* id *) string ->
  (* type *) string ->
  (* mode *) string ->
  (* text *) string ->
  Content.
  
Inductive InLineTextContent : Set :=
  BuildInLineTextContent :
  (* Inheritence Attribute *) Content -> 
  (* id *) string ->
  InLineTextContent.
  
Inductive InLineXHTMLContent : Set :=
  BuildInLineXHTMLContent :
  (* Inheritence Attribute *) Content -> 
  (* id *) string ->
  InLineXHTMLContent.
  
Inductive InLineOtherContent : Set :=
  BuildInLineOtherContent :
  (* Inheritence Attribute *) Content -> 
  (* id *) string ->
  InLineOtherContent.
  
Inductive OutOfLineContent : Set :=
  BuildOutOfLineContent :
  (* Inheritence Attribute *) Content -> 
  (* id *) string ->
  (* src *) string ->
  OutOfLineContent.
  
Inductive Generator : Set :=
  BuildGenerator :
  (* id *) string ->
  (* uri *) string ->
  (* version *) string ->
  (* name *) string ->
  Generator.
  
Inductive Category : Set :=
  BuildCategory :
  (* id *) string ->
  (* term *) string ->
  (* scheme *) string ->
  (* label *) string ->
  Category.
  
Inductive Link : Set :=
  BuildLink :
  (* id *) string ->
  (* rel *) string ->
  (* hrefl *) string ->
  (* type *) string ->
  (* hreflang *) string ->
  (* title *) string ->
  (* lenght *) nat ->
  Link.
  
Inductive Person : Set :=
  BuildPerson :
  (* id *) string ->
  (* name *) string ->
  (* uri *) string ->
  (* email *) string ->
  Person.
  
Inductive Author : Set :=
  BuildAuthor :
  (* Inheritence Attribute *) Person -> 
  (* id *) string ->
  Author.
  
Inductive Contributor : Set :=
  BuildContributor :
  (* Inheritence Attribute *) Person -> 
  (* id *) string ->
  Contributor.
  

Inductive ATOMLinks : Set :=
   BuildATOMLinks :
   ATOM ->
   list Link ->
   ATOMLinks.
Inductive ATOMGenerator : Set :=
   BuildATOMGenerator :
   ATOM ->
   Generator ->
   ATOMGenerator.
Inductive ATOMCategories : Set :=
   BuildATOMCategories :
   ATOM ->
   list Category ->
   ATOMCategories.
Inductive ATOMAuthors : Set :=
   BuildATOMAuthors :
   ATOM ->
   list Author ->
   ATOMAuthors.
Inductive ATOMContributors : Set :=
   BuildATOMContributors :
   ATOM ->
   list Contributor ->
   ATOMContributors.
Inductive ATOMEntrie : Set :=
   BuildATOMEntrie :
   ATOM ->
   list Entry ->
   ATOMEntrie.

Inductive EntryLinks : Set :=
   BuildEntryLinks :
   Entry ->
   list Link ->
   EntryLinks.
Inductive EntrySource : Set :=
   BuildEntrySource :
   Entry ->
   Source ->
   EntrySource.
Inductive EntryContent : Set :=
   BuildEntryContent :
   Entry ->
   Content ->
   EntryContent.
Inductive EntryCategories : Set :=
   BuildEntryCategories :
   Entry ->
   list Category ->
   EntryCategories.
Inductive EntryAuthors : Set :=
   BuildEntryAuthors :
   Entry ->
   list Author ->
   EntryAuthors.
Inductive EntryContributors : Set :=
   BuildEntryContributors :
   Entry ->
   list Contributor ->
   EntryContributors.
Inductive EntryAtom : Set :=
   BuildEntryAtom :
   Entry ->
   ATOM ->
   EntryAtom.

Inductive SourceLinks : Set :=
   BuildSourceLinks :
   Source ->
   list Link ->
   SourceLinks.
Inductive SourceGenerator : Set :=
   BuildSourceGenerator :
   Source ->
   Generator ->
   SourceGenerator.
Inductive SourceContributors : Set :=
   BuildSourceContributors :
   Source ->
   list Contributor ->
   SourceContributors.
Inductive SourceCategories : Set :=
   BuildSourceCategories :
   Source ->
   list Category ->
   SourceCategories.
Inductive SourceAuthor : Set :=
   BuildSourceAuthor :
   Source ->
   Author ->
   SourceAuthor.







Inductive CategoryAtom : Set :=
   BuildCategoryAtom :
   Category ->
   ATOM ->
   CategoryAtom.
Inductive CategoryEntry : Set :=
   BuildCategoryEntry :
   Category ->
   Entry ->
   CategoryEntry.

Inductive LinkAtom : Set :=
   BuildLinkAtom :
   Link ->
   ATOM ->
   LinkAtom.
Inductive LinkEntry : Set :=
   BuildLinkEntry :
   Link ->
   Entry ->
   LinkEntry.


Inductive AuthorAtom : Set :=
   BuildAuthorAtom :
   Author ->
   ATOM ->
   AuthorAtom.




(* Accessors *)
Definition ATOM_getId (a : ATOM) : string :=
  match a with BuildATOM  id title id subtitle rights icon logo lastUpdate  => id end.
Definition ATOM_getTitle (a : ATOM) : string :=
  match a with BuildATOM  id title id subtitle rights icon logo lastUpdate  => title end.
Definition ATOM_getId (a : ATOM) : string :=
  match a with BuildATOM  id title id subtitle rights icon logo lastUpdate  => id end.
Definition ATOM_getSubtitle (a : ATOM) : string :=
  match a with BuildATOM  id title id subtitle rights icon logo lastUpdate  => subtitle end.
Definition ATOM_getRights (a : ATOM) : string :=
  match a with BuildATOM  id title id subtitle rights icon logo lastUpdate  => rights end.
Definition ATOM_getIcon (a : ATOM) : string :=
  match a with BuildATOM  id title id subtitle rights icon logo lastUpdate  => icon end.
Definition ATOM_getLogo (a : ATOM) : string :=
  match a with BuildATOM  id title id subtitle rights icon logo lastUpdate  => logo end.
Definition ATOM_getLastUpdate (a : ATOM) : string :=
  match a with BuildATOM  id title id subtitle rights icon logo lastUpdate  => lastUpdate end.
 
Definition Entry_getId (e : Entry) : string :=
  match e with BuildEntry  id title id rights summary published lastUpdate  => id end.
Definition Entry_getTitle (e : Entry) : string :=
  match e with BuildEntry  id title id rights summary published lastUpdate  => title end.
Definition Entry_getId (e : Entry) : string :=
  match e with BuildEntry  id title id rights summary published lastUpdate  => id end.
Definition Entry_getRights (e : Entry) : string :=
  match e with BuildEntry  id title id rights summary published lastUpdate  => rights end.
Definition Entry_getSummary (e : Entry) : string :=
  match e with BuildEntry  id title id rights summary published lastUpdate  => summary end.
Definition Entry_getPublished (e : Entry) : string :=
  match e with BuildEntry  id title id rights summary published lastUpdate  => published end.
Definition Entry_getLastUpdate (e : Entry) : string :=
  match e with BuildEntry  id title id rights summary published lastUpdate  => lastUpdate end.
 
Definition Source_getId (s : Source) : string :=
  match s with BuildSource  id id icon logo rights title subtitle lastUpdate  => id end.
Definition Source_getId (s : Source) : string :=
  match s with BuildSource  id id icon logo rights title subtitle lastUpdate  => id end.
Definition Source_getIcon (s : Source) : string :=
  match s with BuildSource  id id icon logo rights title subtitle lastUpdate  => icon end.
Definition Source_getLogo (s : Source) : string :=
  match s with BuildSource  id id icon logo rights title subtitle lastUpdate  => logo end.
Definition Source_getRights (s : Source) : string :=
  match s with BuildSource  id id icon logo rights title subtitle lastUpdate  => rights end.
Definition Source_getTitle (s : Source) : string :=
  match s with BuildSource  id id icon logo rights title subtitle lastUpdate  => title end.
Definition Source_getSubtitle (s : Source) : string :=
  match s with BuildSource  id id icon logo rights title subtitle lastUpdate  => subtitle end.
Definition Source_getLastUpdate (s : Source) : string :=
  match s with BuildSource  id id icon logo rights title subtitle lastUpdate  => lastUpdate end.
 
Definition Content_getId (c : Content) : string :=
  match c with BuildContent  id type mode text  => id end.
Definition Content_getType (c : Content) : string :=
  match c with BuildContent  id type mode text  => type end.
Definition Content_getMode (c : Content) : string :=
  match c with BuildContent  id type mode text  => mode end.
Definition Content_getText (c : Content) : string :=
  match c with BuildContent  id type mode text  => text end.
 
Definition InLineTextContent_getContent (i : InLineTextContent) : Content :=
  match i with BuildInLineTextContent content id  => content end.
Definition InLineTextContent_getId (i : InLineTextContent) : string :=
  match i with BuildInLineTextContent content id  => id end.
 
Definition InLineXHTMLContent_getContent (i : InLineXHTMLContent) : Content :=
  match i with BuildInLineXHTMLContent content id  => content end.
Definition InLineXHTMLContent_getId (i : InLineXHTMLContent) : string :=
  match i with BuildInLineXHTMLContent content id  => id end.
 
Definition InLineOtherContent_getContent (i : InLineOtherContent) : Content :=
  match i with BuildInLineOtherContent content id  => content end.
Definition InLineOtherContent_getId (i : InLineOtherContent) : string :=
  match i with BuildInLineOtherContent content id  => id end.
 
Definition OutOfLineContent_getContent (o : OutOfLineContent) : Content :=
  match o with BuildOutOfLineContent content id src  => content end.
Definition OutOfLineContent_getId (o : OutOfLineContent) : string :=
  match o with BuildOutOfLineContent content id src  => id end.
Definition OutOfLineContent_getSrc (o : OutOfLineContent) : string :=
  match o with BuildOutOfLineContent content id src  => src end.
 
Definition Generator_getId (g : Generator) : string :=
  match g with BuildGenerator  id uri version name  => id end.
Definition Generator_getUri (g : Generator) : string :=
  match g with BuildGenerator  id uri version name  => uri end.
Definition Generator_getVersion (g : Generator) : string :=
  match g with BuildGenerator  id uri version name  => version end.
Definition Generator_getName (g : Generator) : string :=
  match g with BuildGenerator  id uri version name  => name end.
 
Definition Category_getId (c : Category) : string :=
  match c with BuildCategory  id term scheme label  => id end.
Definition Category_getTerm (c : Category) : string :=
  match c with BuildCategory  id term scheme label  => term end.
Definition Category_getScheme (c : Category) : string :=
  match c with BuildCategory  id term scheme label  => scheme end.
Definition Category_getLabel (c : Category) : string :=
  match c with BuildCategory  id term scheme label  => label end.
 
Definition Link_getId (l : Link) : string :=
  match l with BuildLink  id rel hrefl type hreflang title lenght  => id end.
Definition Link_getRel (l : Link) : string :=
  match l with BuildLink  id rel hrefl type hreflang title lenght  => rel end.
Definition Link_getHrefl (l : Link) : string :=
  match l with BuildLink  id rel hrefl type hreflang title lenght  => hrefl end.
Definition Link_getType (l : Link) : string :=
  match l with BuildLink  id rel hrefl type hreflang title lenght  => type end.
Definition Link_getHreflang (l : Link) : string :=
  match l with BuildLink  id rel hrefl type hreflang title lenght  => hreflang end.
Definition Link_getTitle (l : Link) : string :=
  match l with BuildLink  id rel hrefl type hreflang title lenght  => title end.
Definition Link_getLenght (l : Link) : nat :=
  match l with BuildLink  id rel hrefl type hreflang title lenght  => lenght end.
 
Definition Person_getId (p : Person) : string :=
  match p with BuildPerson  id name uri email  => id end.
Definition Person_getName (p : Person) : string :=
  match p with BuildPerson  id name uri email  => name end.
Definition Person_getUri (p : Person) : string :=
  match p with BuildPerson  id name uri email  => uri end.
Definition Person_getEmail (p : Person) : string :=
  match p with BuildPerson  id name uri email  => email end.
 
Definition Author_getPerson (a : Author) : Person :=
  match a with BuildAuthor person id  => person end.
Definition Author_getId (a : Author) : string :=
  match a with BuildAuthor person id  => id end.
 
Definition Contributor_getPerson (c : Contributor) : Person :=
  match c with BuildContributor person id  => person end.
Definition Contributor_getId (c : Contributor) : string :=
  match c with BuildContributor person id  => id end.
 


		
(* Meta-types *)
Inductive ATOMMetamodel_EClass : Set :=
  | ATOMEClass
  | EntryEClass
  | SourceEClass
  | ContentEClass
  | InLineTextContentEClass
  | InLineXHTMLContentEClass
  | InLineOtherContentEClass
  | OutOfLineContentEClass
  | GeneratorEClass
  | CategoryEClass
  | LinkEClass
  | PersonEClass
  | AuthorEClass
  | ContributorEClass
.

Definition ATOMMetamodel_getTypeByEClass (atec_arg : ATOMMetamodel_EClass) : Set :=
  match atec_arg with
    | ATOMEClass => ATOM
    | EntryEClass => Entry
    | SourceEClass => Source
    | ContentEClass => Content
    | InLineTextContentEClass => InLineTextContent
    | InLineXHTMLContentEClass => InLineXHTMLContent
    | InLineOtherContentEClass => InLineOtherContent
    | OutOfLineContentEClass => OutOfLineContent
    | GeneratorEClass => Generator
    | CategoryEClass => Category
    | LinkEClass => Link
    | PersonEClass => Person
    | AuthorEClass => Author
    | ContributorEClass => Contributor
  end.	

Definition ATOMMetamodel_getEAttributeTypesByEClass (atec_arg : ATOMMetamodel_EClass) : Set :=
  match atec_arg with
    | ATOMEClass => 
    (string * string * string * string * string * string * string)
    | EntryEClass => 
    (string * string * string * string * string * string)
    | SourceEClass => 
    (string * string * string * string * string * string * string)
    | ContentEClass => 
    (string * string * string)
    | InLineTextContentEClass => 
    (Content)
    | InLineXHTMLContentEClass => 
    (Content)
    | InLineOtherContentEClass => 
    (Content)
    | OutOfLineContentEClass => 
    (Content * string)
    | GeneratorEClass => 
    (string * string * string)
    | CategoryEClass => 
    (string * string * string)
    | LinkEClass => 
    (string * string * string * string * string * nat)
    | PersonEClass => 
    (string * string * string)
    | AuthorEClass => 
    (Person)
    | ContributorEClass => 
    (Person)
  end.

Inductive ATOMMetamodel_EReference : Set :=
| ATOMLinksEReference
| ATOMGeneratorEReference
| ATOMCategoriesEReference
| ATOMAuthorsEReference
| ATOMContributorsEReference
| ATOMEntrieEReference
| EntryLinksEReference
| EntrySourceEReference
| EntryContentEReference
| EntryCategoriesEReference
| EntryAuthorsEReference
| EntryContributorsEReference
| EntryAtomEReference
| SourceLinksEReference
| SourceGeneratorEReference
| SourceContributorsEReference
| SourceCategoriesEReference
| SourceAuthorEReference
| CategoryAtomEReference
| CategoryEntryEReference
| LinkAtomEReference
| LinkEntryEReference
| AuthorAtomEReference
.

Definition ATOMMetamodel_getTypeByEReference (ater_arg : ATOMMetamodel_EReference) : Set :=
  match ater_arg with
| ATOMLinksEReference => ATOMLinks
| ATOMGeneratorEReference => ATOMGenerator
| ATOMCategoriesEReference => ATOMCategories
| ATOMAuthorsEReference => ATOMAuthors
| ATOMContributorsEReference => ATOMContributors
| ATOMEntrieEReference => ATOMEntrie
| EntryLinksEReference => EntryLinks
| EntrySourceEReference => EntrySource
| EntryContentEReference => EntryContent
| EntryCategoriesEReference => EntryCategories
| EntryAuthorsEReference => EntryAuthors
| EntryContributorsEReference => EntryContributors
| EntryAtomEReference => EntryAtom
| SourceLinksEReference => SourceLinks
| SourceGeneratorEReference => SourceGenerator
| SourceContributorsEReference => SourceContributors
| SourceCategoriesEReference => SourceCategories
| SourceAuthorEReference => SourceAuthor
| CategoryAtomEReference => CategoryAtom
| CategoryEntryEReference => CategoryEntry
| LinkAtomEReference => LinkAtom
| LinkEntryEReference => LinkEntry
| AuthorAtomEReference => AuthorAtom
  end.

Definition ATOMMetamodel_getERoleTypesByEReference (ater_arg : ATOMMetamodel_EReference) : Set :=
  match ater_arg with
| ATOMLinksEReference => (ATOM * list Link)
| ATOMGeneratorEReference => (ATOM * Generator)
| ATOMCategoriesEReference => (ATOM * list Category)
| ATOMAuthorsEReference => (ATOM * list Author)
| ATOMContributorsEReference => (ATOM * list Contributor)
| ATOMEntrieEReference => (ATOM * list Entry)
| EntryLinksEReference => (Entry * list Link)
| EntrySourceEReference => (Entry * Source)
| EntryContentEReference => (Entry * Content)
| EntryCategoriesEReference => (Entry * list Category)
| EntryAuthorsEReference => (Entry * list Author)
| EntryContributorsEReference => (Entry * list Contributor)
| EntryAtomEReference => (Entry * ATOM)
| SourceLinksEReference => (Source * list Link)
| SourceGeneratorEReference => (Source * Generator)
| SourceContributorsEReference => (Source * list Contributor)
| SourceCategoriesEReference => (Source * list Category)
| SourceAuthorEReference => (Source * Author)
| CategoryAtomEReference => (Category * ATOM)
| CategoryEntryEReference => (Category * Entry)
| LinkAtomEReference => (Link * ATOM)
| LinkEntryEReference => (Link * Entry)
| AuthorAtomEReference => (Author * ATOM)
  end.

(* Generic types *)





Inductive ATOMMetamodel_EObject : Set :=
 | Build_ATOMMetamodel_EObject : 
    forall (atec_arg: ATOMMetamodel_EClass), (ATOMMetamodel_getTypeByEClass atec_arg) -> ATOMMetamodel_EObject.

Inductive ATOMMetamodel_ELink : Set :=
 | Build_ATOMMetamodel_ELink : 
    forall (ater_arg:ATOMMetamodel_EReference), (ATOMMetamodel_getTypeByEReference ater_arg) -> ATOMMetamodel_ELink.

(* Reflective functions *)

Lemma ATOMMetamodel_eqEClass_dec : 
 forall (atec_arg1:ATOMMetamodel_EClass) (atec_arg2:ATOMMetamodel_EClass), { atec_arg1 = atec_arg2 } + { atec_arg1 <> atec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma ATOMMetamodel_eqEReference_dec : 
 forall (ater_arg1:ATOMMetamodel_EReference) (ater_arg2:ATOMMetamodel_EReference), { ater_arg1 = ater_arg2 } + { ater_arg1 <> ater_arg2 }.
Proof. repeat decide equality. Defined.

Definition ATOMMetamodel_getEClass (ateo_arg : ATOMMetamodel_EObject) : ATOMMetamodel_EClass :=
   match ateo_arg with
  | (Build_ATOMMetamodel_EObject ateo_arg _) => ateo_arg
   end.

Definition ATOMMetamodel_getEReference (atel_arg : ATOMMetamodel_ELink) : ATOMMetamodel_EReference :=
   match atel_arg with
  | (Build_ATOMMetamodel_ELink atel_arg _) => atel_arg
   end.

Definition ATOMMetamodel_instanceOfEClass (atec_arg: ATOMMetamodel_EClass) (ateo_arg : ATOMMetamodel_EObject): bool :=
  if ATOMMetamodel_eqEClass_dec (ATOMMetamodel_getEClass ateo_arg) atec_arg then true else false.

Definition ATOMMetamodel_instanceOfEReference (ater_arg: ATOMMetamodel_EReference) (atel_arg : ATOMMetamodel_ELink): bool :=
  if ATOMMetamodel_eqEReference_dec (ATOMMetamodel_getEReference atel_arg) ater_arg then true else false.


Definition ATOMMetamodel_toEClass (atec_arg : ATOMMetamodel_EClass) (ateo_arg : ATOMMetamodel_EObject) : option (ATOMMetamodel_getTypeByEClass atec_arg).
Proof.
  destruct ateo_arg as [arg1 arg2].
  destruct (ATOMMetamodel_eqEClass_dec arg1 atec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition ATOMMetamodel_toEReference (ater_arg : ATOMMetamodel_EReference) (atel_arg : ATOMMetamodel_ELink) : option (ATOMMetamodel_getTypeByEReference ater_arg).
Proof.
  destruct atel_arg as [arg1 arg2].
  destruct (ATOMMetamodel_eqEReference_dec arg1 ater_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition ATOMMetamodel_toEObjectFromATOM (at_arg :ATOM) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject ATOMEClass at_arg).
Coercion ATOMMetamodel_toEObjectFromATOM : ATOM >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromEntry (en_arg :Entry) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject EntryEClass en_arg).
Coercion ATOMMetamodel_toEObjectFromEntry : Entry >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromSource (so_arg :Source) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject SourceEClass so_arg).
Coercion ATOMMetamodel_toEObjectFromSource : Source >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromContent (co_arg :Content) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject ContentEClass co_arg).
Coercion ATOMMetamodel_toEObjectFromContent : Content >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromInLineTextContent (in_arg :InLineTextContent) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject InLineTextContentEClass in_arg).
Coercion ATOMMetamodel_toEObjectFromInLineTextContent : InLineTextContent >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromInLineXHTMLContent (in_arg :InLineXHTMLContent) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject InLineXHTMLContentEClass in_arg).
Coercion ATOMMetamodel_toEObjectFromInLineXHTMLContent : InLineXHTMLContent >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromInLineOtherContent (in_arg :InLineOtherContent) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject InLineOtherContentEClass in_arg).
Coercion ATOMMetamodel_toEObjectFromInLineOtherContent : InLineOtherContent >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromOutOfLineContent (ou_arg :OutOfLineContent) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject OutOfLineContentEClass ou_arg).
Coercion ATOMMetamodel_toEObjectFromOutOfLineContent : OutOfLineContent >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromGenerator (ge_arg :Generator) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject GeneratorEClass ge_arg).
Coercion ATOMMetamodel_toEObjectFromGenerator : Generator >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromCategory (ca_arg :Category) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject CategoryEClass ca_arg).
Coercion ATOMMetamodel_toEObjectFromCategory : Category >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromLink (li_arg :Link) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject LinkEClass li_arg).
Coercion ATOMMetamodel_toEObjectFromLink : Link >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromPerson (pe_arg :Person) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject PersonEClass pe_arg).
Coercion ATOMMetamodel_toEObjectFromPerson : Person >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromAuthor (au_arg :Author) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject AuthorEClass au_arg).
Coercion ATOMMetamodel_toEObjectFromAuthor : Author >-> ATOMMetamodel_EObject.

Definition ATOMMetamodel_toEObjectFromContributor (co_arg :Contributor) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject ContributorEClass co_arg).
Coercion ATOMMetamodel_toEObjectFromContributor : Contributor >-> ATOMMetamodel_EObject.


(** Metamodel Type Class Instaniation **)
Definition ATOMMetamodel_toEObject (ateo_arg : ATOMMetamodel_EObject) : ATOMMetamodel_EObject := ateo_arg.
Definition ATOMMetamodel_toELink (atel_arg : ATOMMetamodel_ELink) : ATOMMetamodel_ELink := atel_arg.
Definition ATOMModel := Model ATOMMetamodel_EObject ATOMMetamodel_ELink.

Definition ATOMMetamodel_toEObjectOfEClass (atec_arg: ATOMMetamodel_EClass) (t: ATOMMetamodel_getTypeByEClass atec_arg) : ATOMMetamodel_EObject :=
  (Build_ATOMMetamodel_EObject atec_arg t).

Definition ATOMMetamodel_toELinkOfEReference (ater_arg: ATOMMetamodel_EReference) (t: ATOMMetamodel_getTypeByEReference ater_arg) : ATOMMetamodel_ELink :=
		  (Build_ATOMMetamodel_ELink ater_arg t).


(* Accessors on model *)
(* Equality for Types *)
(*? We currently define eq for Eclass on their fist attribute *)
Definition beq_ATOM (at_arg1 : ATOM) (at_arg2 : ATOM) : bool :=
( beq_string (ATOM_getTitle at_arg1) (ATOM_getTitle at_arg2) ) && 
( beq_string (ATOM_getId at_arg1) (ATOM_getId at_arg2) ) && 
( beq_string (ATOM_getSubtitle at_arg1) (ATOM_getSubtitle at_arg2) ) && 
( beq_string (ATOM_getRights at_arg1) (ATOM_getRights at_arg2) ) && 
( beq_string (ATOM_getIcon at_arg1) (ATOM_getIcon at_arg2) ) && 
( beq_string (ATOM_getLogo at_arg1) (ATOM_getLogo at_arg2) ) && 
( beq_string (ATOM_getLastUpdate at_arg1) (ATOM_getLastUpdate at_arg2) )
.

Definition beq_Entry (en_arg1 : Entry) (en_arg2 : Entry) : bool :=
( beq_string (Entry_getTitle en_arg1) (Entry_getTitle en_arg2) ) && 
( beq_string (Entry_getId en_arg1) (Entry_getId en_arg2) ) && 
( beq_string (Entry_getRights en_arg1) (Entry_getRights en_arg2) ) && 
( beq_string (Entry_getSummary en_arg1) (Entry_getSummary en_arg2) ) && 
( beq_string (Entry_getPublished en_arg1) (Entry_getPublished en_arg2) ) && 
( beq_string (Entry_getLastUpdate en_arg1) (Entry_getLastUpdate en_arg2) )
.

Definition beq_Source (so_arg1 : Source) (so_arg2 : Source) : bool :=
( beq_string (Source_getId so_arg1) (Source_getId so_arg2) ) && 
( beq_string (Source_getIcon so_arg1) (Source_getIcon so_arg2) ) && 
( beq_string (Source_getLogo so_arg1) (Source_getLogo so_arg2) ) && 
( beq_string (Source_getRights so_arg1) (Source_getRights so_arg2) ) && 
( beq_string (Source_getTitle so_arg1) (Source_getTitle so_arg2) ) && 
( beq_string (Source_getSubtitle so_arg1) (Source_getSubtitle so_arg2) ) && 
( beq_string (Source_getLastUpdate so_arg1) (Source_getLastUpdate so_arg2) )
.

Definition beq_Content (co_arg1 : Content) (co_arg2 : Content) : bool :=
( beq_string (Content_getType co_arg1) (Content_getType co_arg2) ) && 
( beq_string (Content_getMode co_arg1) (Content_getMode co_arg2) ) && 
( beq_string (Content_getText co_arg1) (Content_getText co_arg2) )
.

Definition beq_InLineTextContent (in_arg1 : InLineTextContent) (in_arg2 : InLineTextContent) : bool :=
beq_Content (InLineTextContent_getContent in_arg1) (InLineTextContent_getContent in_arg2)
.

Definition beq_InLineXHTMLContent (in_arg1 : InLineXHTMLContent) (in_arg2 : InLineXHTMLContent) : bool :=
beq_Content (InLineXHTMLContent_getContent in_arg1) (InLineXHTMLContent_getContent in_arg2)
.

Definition beq_InLineOtherContent (in_arg1 : InLineOtherContent) (in_arg2 : InLineOtherContent) : bool :=
beq_Content (InLineOtherContent_getContent in_arg1) (InLineOtherContent_getContent in_arg2)
.

Definition beq_OutOfLineContent (ou_arg1 : OutOfLineContent) (ou_arg2 : OutOfLineContent) : bool :=
beq_Content (OutOfLineContent_getContent ou_arg1) (OutOfLineContent_getContent ou_arg2) &&
( beq_string (OutOfLineContent_getSrc ou_arg1) (OutOfLineContent_getSrc ou_arg2) )
.

Definition beq_Generator (ge_arg1 : Generator) (ge_arg2 : Generator) : bool :=
( beq_string (Generator_getUri ge_arg1) (Generator_getUri ge_arg2) ) && 
( beq_string (Generator_getVersion ge_arg1) (Generator_getVersion ge_arg2) ) && 
( beq_string (Generator_getName ge_arg1) (Generator_getName ge_arg2) )
.

Definition beq_Category (ca_arg1 : Category) (ca_arg2 : Category) : bool :=
( beq_string (Category_getTerm ca_arg1) (Category_getTerm ca_arg2) ) && 
( beq_string (Category_getScheme ca_arg1) (Category_getScheme ca_arg2) ) && 
( beq_string (Category_getLabel ca_arg1) (Category_getLabel ca_arg2) )
.

Definition beq_Link (li_arg1 : Link) (li_arg2 : Link) : bool :=
( beq_string (Link_getRel li_arg1) (Link_getRel li_arg2) ) && 
( beq_string (Link_getHrefl li_arg1) (Link_getHrefl li_arg2) ) && 
( beq_string (Link_getType li_arg1) (Link_getType li_arg2) ) && 
( beq_string (Link_getHreflang li_arg1) (Link_getHreflang li_arg2) ) && 
( beq_string (Link_getTitle li_arg1) (Link_getTitle li_arg2) ) && 
( beq_nat (Link_getLenght li_arg1) (Link_getLenght li_arg2) )
.

Definition beq_Person (pe_arg1 : Person) (pe_arg2 : Person) : bool :=
( beq_string (Person_getName pe_arg1) (Person_getName pe_arg2) ) && 
( beq_string (Person_getUri pe_arg1) (Person_getUri pe_arg2) ) && 
( beq_string (Person_getEmail pe_arg1) (Person_getEmail pe_arg2) )
.

Definition beq_Author (au_arg1 : Author) (au_arg2 : Author) : bool :=
beq_Person (Author_getPerson au_arg1) (Author_getPerson au_arg2)
.

Definition beq_Contributor (co_arg1 : Contributor) (co_arg2 : Contributor) : bool :=
beq_Person (Contributor_getPerson co_arg1) (Contributor_getPerson co_arg2)
.



Fixpoint ATOMMetamodel_Content_downcastInLineTextContent (co_arg : Content) (l : list ATOMMetamodel_EObject) : option InLineTextContent := 
  match l with
	 | Build_ATOMMetamodel_EObject InLineTextContentEClass (BuildInLineTextContent eSuper id ) :: l' => 
		if beq_Content co_arg eSuper then (Some (BuildInLineTextContent eSuper id )) else (ATOMMetamodel_Content_downcastInLineTextContent co_arg l')
	 | _ :: l' => (ATOMMetamodel_Content_downcastInLineTextContent co_arg l')
	 | nil => None
end.

Definition Content_downcastInLineTextContent (co_arg : Content) (m : ATOMModel) : option InLineTextContent :=
  ATOMMetamodel_Content_downcastInLineTextContent co_arg (@allModelElements _ _ m).

Fixpoint ATOMMetamodel_Content_downcastInLineXHTMLContent (co_arg : Content) (l : list ATOMMetamodel_EObject) : option InLineXHTMLContent := 
  match l with
	 | Build_ATOMMetamodel_EObject InLineXHTMLContentEClass (BuildInLineXHTMLContent eSuper id ) :: l' => 
		if beq_Content co_arg eSuper then (Some (BuildInLineXHTMLContent eSuper id )) else (ATOMMetamodel_Content_downcastInLineXHTMLContent co_arg l')
	 | _ :: l' => (ATOMMetamodel_Content_downcastInLineXHTMLContent co_arg l')
	 | nil => None
end.

Definition Content_downcastInLineXHTMLContent (co_arg : Content) (m : ATOMModel) : option InLineXHTMLContent :=
  ATOMMetamodel_Content_downcastInLineXHTMLContent co_arg (@allModelElements _ _ m).

Fixpoint ATOMMetamodel_Content_downcastInLineOtherContent (co_arg : Content) (l : list ATOMMetamodel_EObject) : option InLineOtherContent := 
  match l with
	 | Build_ATOMMetamodel_EObject InLineOtherContentEClass (BuildInLineOtherContent eSuper id ) :: l' => 
		if beq_Content co_arg eSuper then (Some (BuildInLineOtherContent eSuper id )) else (ATOMMetamodel_Content_downcastInLineOtherContent co_arg l')
	 | _ :: l' => (ATOMMetamodel_Content_downcastInLineOtherContent co_arg l')
	 | nil => None
end.

Definition Content_downcastInLineOtherContent (co_arg : Content) (m : ATOMModel) : option InLineOtherContent :=
  ATOMMetamodel_Content_downcastInLineOtherContent co_arg (@allModelElements _ _ m).

Fixpoint ATOMMetamodel_Content_downcastOutOfLineContent (co_arg : Content) (l : list ATOMMetamodel_EObject) : option OutOfLineContent := 
  match l with
	 | Build_ATOMMetamodel_EObject OutOfLineContentEClass (BuildOutOfLineContent eSuper id src ) :: l' => 
		if beq_Content co_arg eSuper then (Some (BuildOutOfLineContent eSuper id src )) else (ATOMMetamodel_Content_downcastOutOfLineContent co_arg l')
	 | _ :: l' => (ATOMMetamodel_Content_downcastOutOfLineContent co_arg l')
	 | nil => None
end.

Definition Content_downcastOutOfLineContent (co_arg : Content) (m : ATOMModel) : option OutOfLineContent :=
  ATOMMetamodel_Content_downcastOutOfLineContent co_arg (@allModelElements _ _ m).


Fixpoint ATOMMetamodel_Person_downcastAuthor (pe_arg : Person) (l : list ATOMMetamodel_EObject) : option Author := 
  match l with
	 | Build_ATOMMetamodel_EObject AuthorEClass (BuildAuthor eSuper id ) :: l' => 
		if beq_Person pe_arg eSuper then (Some (BuildAuthor eSuper id )) else (ATOMMetamodel_Person_downcastAuthor pe_arg l')
	 | _ :: l' => (ATOMMetamodel_Person_downcastAuthor pe_arg l')
	 | nil => None
end.

Definition Person_downcastAuthor (pe_arg : Person) (m : ATOMModel) : option Author :=
  ATOMMetamodel_Person_downcastAuthor pe_arg (@allModelElements _ _ m).

Fixpoint ATOMMetamodel_Person_downcastContributor (pe_arg : Person) (l : list ATOMMetamodel_EObject) : option Contributor := 
  match l with
	 | Build_ATOMMetamodel_EObject ContributorEClass (BuildContributor eSuper id ) :: l' => 
		if beq_Person pe_arg eSuper then (Some (BuildContributor eSuper id )) else (ATOMMetamodel_Person_downcastContributor pe_arg l')
	 | _ :: l' => (ATOMMetamodel_Person_downcastContributor pe_arg l')
	 | nil => None
end.

Definition Person_downcastContributor (pe_arg : Person) (m : ATOMModel) : option Contributor :=
  ATOMMetamodel_Person_downcastContributor pe_arg (@allModelElements _ _ m).



Fixpoint ATOM_getLinksOnLinks (at_arg : ATOM) (l : list ATOMMetamodel_ELink) : option (list Link) :=
match l with
| (Build_ATOMMetamodel_ELink ATOMLinksEReference (BuildATOMLinks ATOM_ctr links_ctr)) :: l' => 
	  if beq_ATOM ATOM_ctr at_arg then Some links_ctr else ATOM_getLinksOnLinks at_arg l'
| _ :: l' => ATOM_getLinksOnLinks at_arg l'
| nil => None
end.

Definition ATOM_getLinks (at_arg : ATOM) (m : ATOMModel) : option (list Link) :=
  ATOM_getLinksOnLinks at_arg (@allModelLinks _ _ m).
Fixpoint ATOM_getGeneratorOnLinks (at_arg : ATOM) (l : list ATOMMetamodel_ELink) : option (Generator) :=
match l with
| (Build_ATOMMetamodel_ELink ATOMGeneratorEReference (BuildATOMGenerator ATOM_ctr generator_ctr)) :: l' => 
	  if beq_ATOM ATOM_ctr at_arg then Some generator_ctr else ATOM_getGeneratorOnLinks at_arg l'
| _ :: l' => ATOM_getGeneratorOnLinks at_arg l'
| nil => None
end.

Definition ATOM_getGenerator (at_arg : ATOM) (m : ATOMModel) : option (Generator) :=
  ATOM_getGeneratorOnLinks at_arg (@allModelLinks _ _ m).
Fixpoint ATOM_getCategoriesOnLinks (at_arg : ATOM) (l : list ATOMMetamodel_ELink) : option (list Category) :=
match l with
| (Build_ATOMMetamodel_ELink ATOMCategoriesEReference (BuildATOMCategories ATOM_ctr categories_ctr)) :: l' => 
	  if beq_ATOM ATOM_ctr at_arg then Some categories_ctr else ATOM_getCategoriesOnLinks at_arg l'
| _ :: l' => ATOM_getCategoriesOnLinks at_arg l'
| nil => None
end.

Definition ATOM_getCategories (at_arg : ATOM) (m : ATOMModel) : option (list Category) :=
  ATOM_getCategoriesOnLinks at_arg (@allModelLinks _ _ m).
Fixpoint ATOM_getAuthorsOnLinks (at_arg : ATOM) (l : list ATOMMetamodel_ELink) : option (list Author) :=
match l with
| (Build_ATOMMetamodel_ELink ATOMAuthorsEReference (BuildATOMAuthors ATOM_ctr authors_ctr)) :: l' => 
	  if beq_ATOM ATOM_ctr at_arg then Some authors_ctr else ATOM_getAuthorsOnLinks at_arg l'
| _ :: l' => ATOM_getAuthorsOnLinks at_arg l'
| nil => None
end.

Definition ATOM_getAuthors (at_arg : ATOM) (m : ATOMModel) : option (list Author) :=
  ATOM_getAuthorsOnLinks at_arg (@allModelLinks _ _ m).
Fixpoint ATOM_getContributorsOnLinks (at_arg : ATOM) (l : list ATOMMetamodel_ELink) : option (list Contributor) :=
match l with
| (Build_ATOMMetamodel_ELink ATOMContributorsEReference (BuildATOMContributors ATOM_ctr contributors_ctr)) :: l' => 
	  if beq_ATOM ATOM_ctr at_arg then Some contributors_ctr else ATOM_getContributorsOnLinks at_arg l'
| _ :: l' => ATOM_getContributorsOnLinks at_arg l'
| nil => None
end.

Definition ATOM_getContributors (at_arg : ATOM) (m : ATOMModel) : option (list Contributor) :=
  ATOM_getContributorsOnLinks at_arg (@allModelLinks _ _ m).
Fixpoint ATOM_getEntrieOnLinks (at_arg : ATOM) (l : list ATOMMetamodel_ELink) : option (list Entry) :=
match l with
| (Build_ATOMMetamodel_ELink ATOMEntrieEReference (BuildATOMEntrie ATOM_ctr entrie_ctr)) :: l' => 
	  if beq_ATOM ATOM_ctr at_arg then Some entrie_ctr else ATOM_getEntrieOnLinks at_arg l'
| _ :: l' => ATOM_getEntrieOnLinks at_arg l'
| nil => None
end.

Definition ATOM_getEntrie (at_arg : ATOM) (m : ATOMModel) : option (list Entry) :=
  ATOM_getEntrieOnLinks at_arg (@allModelLinks _ _ m).

Fixpoint Entry_getLinksOnLinks (en_arg : Entry) (l : list ATOMMetamodel_ELink) : option (list Link) :=
match l with
| (Build_ATOMMetamodel_ELink EntryLinksEReference (BuildEntryLinks Entry_ctr links_ctr)) :: l' => 
	  if beq_Entry Entry_ctr en_arg then Some links_ctr else Entry_getLinksOnLinks en_arg l'
| _ :: l' => Entry_getLinksOnLinks en_arg l'
| nil => None
end.

Definition Entry_getLinks (en_arg : Entry) (m : ATOMModel) : option (list Link) :=
  Entry_getLinksOnLinks en_arg (@allModelLinks _ _ m).
Fixpoint Entry_getSourceOnLinks (en_arg : Entry) (l : list ATOMMetamodel_ELink) : option (Source) :=
match l with
| (Build_ATOMMetamodel_ELink EntrySourceEReference (BuildEntrySource Entry_ctr source_ctr)) :: l' => 
	  if beq_Entry Entry_ctr en_arg then Some source_ctr else Entry_getSourceOnLinks en_arg l'
| _ :: l' => Entry_getSourceOnLinks en_arg l'
| nil => None
end.

Definition Entry_getSource (en_arg : Entry) (m : ATOMModel) : option (Source) :=
  Entry_getSourceOnLinks en_arg (@allModelLinks _ _ m).
Fixpoint Entry_getContentOnLinks (en_arg : Entry) (l : list ATOMMetamodel_ELink) : option (Content) :=
match l with
| (Build_ATOMMetamodel_ELink EntryContentEReference (BuildEntryContent Entry_ctr content_ctr)) :: l' => 
	  if beq_Entry Entry_ctr en_arg then Some content_ctr else Entry_getContentOnLinks en_arg l'
| _ :: l' => Entry_getContentOnLinks en_arg l'
| nil => None
end.

Definition Entry_getContent (en_arg : Entry) (m : ATOMModel) : option (Content) :=
  Entry_getContentOnLinks en_arg (@allModelLinks _ _ m).
Fixpoint Entry_getCategoriesOnLinks (en_arg : Entry) (l : list ATOMMetamodel_ELink) : option (list Category) :=
match l with
| (Build_ATOMMetamodel_ELink EntryCategoriesEReference (BuildEntryCategories Entry_ctr categories_ctr)) :: l' => 
	  if beq_Entry Entry_ctr en_arg then Some categories_ctr else Entry_getCategoriesOnLinks en_arg l'
| _ :: l' => Entry_getCategoriesOnLinks en_arg l'
| nil => None
end.

Definition Entry_getCategories (en_arg : Entry) (m : ATOMModel) : option (list Category) :=
  Entry_getCategoriesOnLinks en_arg (@allModelLinks _ _ m).
Fixpoint Entry_getAuthorsOnLinks (en_arg : Entry) (l : list ATOMMetamodel_ELink) : option (list Author) :=
match l with
| (Build_ATOMMetamodel_ELink EntryAuthorsEReference (BuildEntryAuthors Entry_ctr authors_ctr)) :: l' => 
	  if beq_Entry Entry_ctr en_arg then Some authors_ctr else Entry_getAuthorsOnLinks en_arg l'
| _ :: l' => Entry_getAuthorsOnLinks en_arg l'
| nil => None
end.

Definition Entry_getAuthors (en_arg : Entry) (m : ATOMModel) : option (list Author) :=
  Entry_getAuthorsOnLinks en_arg (@allModelLinks _ _ m).
Fixpoint Entry_getContributorsOnLinks (en_arg : Entry) (l : list ATOMMetamodel_ELink) : option (list Contributor) :=
match l with
| (Build_ATOMMetamodel_ELink EntryContributorsEReference (BuildEntryContributors Entry_ctr contributors_ctr)) :: l' => 
	  if beq_Entry Entry_ctr en_arg then Some contributors_ctr else Entry_getContributorsOnLinks en_arg l'
| _ :: l' => Entry_getContributorsOnLinks en_arg l'
| nil => None
end.

Definition Entry_getContributors (en_arg : Entry) (m : ATOMModel) : option (list Contributor) :=
  Entry_getContributorsOnLinks en_arg (@allModelLinks _ _ m).
Fixpoint Entry_getAtomOnLinks (en_arg : Entry) (l : list ATOMMetamodel_ELink) : option (ATOM) :=
match l with
| (Build_ATOMMetamodel_ELink EntryAtomEReference (BuildEntryAtom Entry_ctr atom_ctr)) :: l' => 
	  if beq_Entry Entry_ctr en_arg then Some atom_ctr else Entry_getAtomOnLinks en_arg l'
| _ :: l' => Entry_getAtomOnLinks en_arg l'
| nil => None
end.

Definition Entry_getAtom (en_arg : Entry) (m : ATOMModel) : option (ATOM) :=
  Entry_getAtomOnLinks en_arg (@allModelLinks _ _ m).

Fixpoint Source_getLinksOnLinks (so_arg : Source) (l : list ATOMMetamodel_ELink) : option (list Link) :=
match l with
| (Build_ATOMMetamodel_ELink SourceLinksEReference (BuildSourceLinks Source_ctr links_ctr)) :: l' => 
	  if beq_Source Source_ctr so_arg then Some links_ctr else Source_getLinksOnLinks so_arg l'
| _ :: l' => Source_getLinksOnLinks so_arg l'
| nil => None
end.

Definition Source_getLinks (so_arg : Source) (m : ATOMModel) : option (list Link) :=
  Source_getLinksOnLinks so_arg (@allModelLinks _ _ m).
Fixpoint Source_getGeneratorOnLinks (so_arg : Source) (l : list ATOMMetamodel_ELink) : option (Generator) :=
match l with
| (Build_ATOMMetamodel_ELink SourceGeneratorEReference (BuildSourceGenerator Source_ctr generator_ctr)) :: l' => 
	  if beq_Source Source_ctr so_arg then Some generator_ctr else Source_getGeneratorOnLinks so_arg l'
| _ :: l' => Source_getGeneratorOnLinks so_arg l'
| nil => None
end.

Definition Source_getGenerator (so_arg : Source) (m : ATOMModel) : option (Generator) :=
  Source_getGeneratorOnLinks so_arg (@allModelLinks _ _ m).
Fixpoint Source_getContributorsOnLinks (so_arg : Source) (l : list ATOMMetamodel_ELink) : option (list Contributor) :=
match l with
| (Build_ATOMMetamodel_ELink SourceContributorsEReference (BuildSourceContributors Source_ctr contributors_ctr)) :: l' => 
	  if beq_Source Source_ctr so_arg then Some contributors_ctr else Source_getContributorsOnLinks so_arg l'
| _ :: l' => Source_getContributorsOnLinks so_arg l'
| nil => None
end.

Definition Source_getContributors (so_arg : Source) (m : ATOMModel) : option (list Contributor) :=
  Source_getContributorsOnLinks so_arg (@allModelLinks _ _ m).
Fixpoint Source_getCategoriesOnLinks (so_arg : Source) (l : list ATOMMetamodel_ELink) : option (list Category) :=
match l with
| (Build_ATOMMetamodel_ELink SourceCategoriesEReference (BuildSourceCategories Source_ctr categories_ctr)) :: l' => 
	  if beq_Source Source_ctr so_arg then Some categories_ctr else Source_getCategoriesOnLinks so_arg l'
| _ :: l' => Source_getCategoriesOnLinks so_arg l'
| nil => None
end.

Definition Source_getCategories (so_arg : Source) (m : ATOMModel) : option (list Category) :=
  Source_getCategoriesOnLinks so_arg (@allModelLinks _ _ m).
Fixpoint Source_getAuthorOnLinks (so_arg : Source) (l : list ATOMMetamodel_ELink) : option (Author) :=
match l with
| (Build_ATOMMetamodel_ELink SourceAuthorEReference (BuildSourceAuthor Source_ctr author_ctr)) :: l' => 
	  if beq_Source Source_ctr so_arg then Some author_ctr else Source_getAuthorOnLinks so_arg l'
| _ :: l' => Source_getAuthorOnLinks so_arg l'
| nil => None
end.

Definition Source_getAuthor (so_arg : Source) (m : ATOMModel) : option (Author) :=
  Source_getAuthorOnLinks so_arg (@allModelLinks _ _ m).







Fixpoint Category_getAtomOnLinks (ca_arg : Category) (l : list ATOMMetamodel_ELink) : option (ATOM) :=
match l with
| (Build_ATOMMetamodel_ELink CategoryAtomEReference (BuildCategoryAtom Category_ctr atom_ctr)) :: l' => 
	  if beq_Category Category_ctr ca_arg then Some atom_ctr else Category_getAtomOnLinks ca_arg l'
| _ :: l' => Category_getAtomOnLinks ca_arg l'
| nil => None
end.

Definition Category_getAtom (ca_arg : Category) (m : ATOMModel) : option (ATOM) :=
  Category_getAtomOnLinks ca_arg (@allModelLinks _ _ m).
Fixpoint Category_getEntryOnLinks (ca_arg : Category) (l : list ATOMMetamodel_ELink) : option (Entry) :=
match l with
| (Build_ATOMMetamodel_ELink CategoryEntryEReference (BuildCategoryEntry Category_ctr entry_ctr)) :: l' => 
	  if beq_Category Category_ctr ca_arg then Some entry_ctr else Category_getEntryOnLinks ca_arg l'
| _ :: l' => Category_getEntryOnLinks ca_arg l'
| nil => None
end.

Definition Category_getEntry (ca_arg : Category) (m : ATOMModel) : option (Entry) :=
  Category_getEntryOnLinks ca_arg (@allModelLinks _ _ m).

Fixpoint Link_getAtomOnLinks (li_arg : Link) (l : list ATOMMetamodel_ELink) : option (ATOM) :=
match l with
| (Build_ATOMMetamodel_ELink LinkAtomEReference (BuildLinkAtom Link_ctr atom_ctr)) :: l' => 
	  if beq_Link Link_ctr li_arg then Some atom_ctr else Link_getAtomOnLinks li_arg l'
| _ :: l' => Link_getAtomOnLinks li_arg l'
| nil => None
end.

Definition Link_getAtom (li_arg : Link) (m : ATOMModel) : option (ATOM) :=
  Link_getAtomOnLinks li_arg (@allModelLinks _ _ m).
Fixpoint Link_getEntryOnLinks (li_arg : Link) (l : list ATOMMetamodel_ELink) : option (Entry) :=
match l with
| (Build_ATOMMetamodel_ELink LinkEntryEReference (BuildLinkEntry Link_ctr entry_ctr)) :: l' => 
	  if beq_Link Link_ctr li_arg then Some entry_ctr else Link_getEntryOnLinks li_arg l'
| _ :: l' => Link_getEntryOnLinks li_arg l'
| nil => None
end.

Definition Link_getEntry (li_arg : Link) (m : ATOMModel) : option (Entry) :=
  Link_getEntryOnLinks li_arg (@allModelLinks _ _ m).


Fixpoint Author_getAtomOnLinks (au_arg : Author) (l : list ATOMMetamodel_ELink) : option (ATOM) :=
match l with
| (Build_ATOMMetamodel_ELink AuthorAtomEReference (BuildAuthorAtom Author_ctr atom_ctr)) :: l' => 
	  if beq_Author Author_ctr au_arg then Some atom_ctr else Author_getAtomOnLinks au_arg l'
| _ :: l' => Author_getAtomOnLinks au_arg l'
| nil => None
end.

Definition Author_getAtom (au_arg : Author) (m : ATOMModel) : option (ATOM) :=
  Author_getAtomOnLinks au_arg (@allModelLinks _ _ m).



Definition ATOMMetamodel_defaultInstanceOfEClass (atec_arg: ATOMMetamodel_EClass) : (ATOMMetamodel_getTypeByEClass atec_arg) :=
  match atec_arg with
  | ATOMEClass => 
  (BuildATOM "" "" "" "" "" "" "" "")
  | EntryEClass => 
  (BuildEntry "" "" "" "" "" "" "")
  | SourceEClass => 
  (BuildSource "" "" "" "" "" "" "" "")
  | ContentEClass => 
  (BuildContent "" "" "" "")
  | InLineTextContentEClass => 
  (BuildInLineTextContent (BuildContent "" "" "" "") "")
  | InLineXHTMLContentEClass => 
  (BuildInLineXHTMLContent (BuildContent "" "" "" "") "")
  | InLineOtherContentEClass => 
  (BuildInLineOtherContent (BuildContent "" "" "" "") "")
  | OutOfLineContentEClass => 
  (BuildOutOfLineContent (BuildContent "" "" "" "") "" "")
  | GeneratorEClass => 
  (BuildGenerator "" "" "" "")
  | CategoryEClass => 
  (BuildCategory "" "" "" "")
  | LinkEClass => 
  (BuildLink "" "" "" "" "" "" 0)
  | PersonEClass => 
  (BuildPerson "" "" "" "")
  | AuthorEClass => 
  (BuildAuthor (BuildPerson "" "" "" "") "")
  | ContributorEClass => 
  (BuildContributor (BuildPerson "" "" "" "") "")
  end.

(* Typeclass Instance *)
Instance ATOMMetamodel : Metamodel ATOMMetamodel_EObject ATOMMetamodel_ELink ATOMMetamodel_EClass ATOMMetamodel_EReference :=
  {
    denoteModelClass := ATOMMetamodel_getTypeByEClass;
    denoteModelReference := ATOMMetamodel_getTypeByEReference;
    toModelClass := ATOMMetamodel_toEClass;
    toModelReference := ATOMMetamodel_toEReference;
    toModelElement := ATOMMetamodel_toEObjectOfEClass;
    toModelLink := ATOMMetamodel_toELinkOfEReference;
    bottomModelClass := ATOMMetamodel_defaultInstanceOfEClass;

    (* Theorems *)
    eqModelClass_dec := ATOMMetamodel_eqEClass_dec;
    eqModelReference_dec := ATOMMetamodel_eqEReference_dec;

    (* Constructors *)
    BuildModelElement := Build_ATOMMetamodel_EObject;
    BuildModelLink := Build_ATOMMetamodel_ELink;
  }.
  
(* Useful lemmas *)
Lemma ATOM_invert : 
  forall (atec_arg: ATOMMetamodel_EClass) (t1 t2: ATOMMetamodel_getTypeByEClass atec_arg), Build_ATOMMetamodel_EObject atec_arg t1 = Build_ATOMMetamodel_EObject atec_arg t2 -> t1 = t2.
Proof.
  intros.
  inversion H.
  apply inj_pair2_eq_dec in H1.
  exact H1.
  apply ATOMMetamodel_eqEClass_dec.
Qed.
