
(********************************************************************
	@name Coq declarations for metamodel: <Class>
	@date 2018/07/30 14:21:48
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import Bool.
Require Import String.
Require Import List.
Require Import Multiset.
Require Import ListSet.
Require Import Omega.
Require Import Coq.Logic.Eqdep_dec.

(* CoqTL libraries *)
Require Import core.utils.tTop.
Require Import core.Metamodel.
Require Import core.Model.
Require Import core.Object.

(* Base types *)
Inductive Person : Set :=
  BuildPerson :
  (* id *) string ->
  (* name *) string ->
  Person.
  
Inductive Account : Set :=
  BuildAccount :
  (* id *) string ->
  (* credit *) string ->
  Account.
  

Inductive PersonAccounts : Set :=
   BuildPersonAccounts :
   Person ->
   list Account ->
   PersonAccounts.

Inductive AccountBelongs : Set :=
   BuildAccountBelongs :
   Account ->
   Person ->
   AccountBelongs.


(* Accessors ... *)
(* Equality for Types ... *)

(* Meta-types *)
Inductive BankMetamodel_Class : Set :=
  | PersonClass
  | AccountClass.

Definition BankMetamodel_getTypeByClass (clec_arg : BankMetamodel_Class) : Set :=
  match clec_arg with
  | PersonClass => Person
  | AccountClass => Account
  end.

Inductive BankMetamodel_Object : Set :=
 | Build_BankMetamodel_Object : 
    forall (clec_arg: BankMetamodel_Class), (BankMetamodel_getTypeByClass clec_arg) -> BankMetamodel_Object.


Inductive BankMetamodel_Reference : Set :=
  | PersonAccountsReference
  | AccountBelongsReference.

Definition BankMetamodel_getTypeByReference (cler_arg : BankMetamodel_Reference) : Set :=
  match cler_arg with
  | PersonAccountsReference => PersonAccounts
  | AccountBelongsReference => AccountBelongs
  end.

Inductive BankMetamodel_Link : Set :=
 | Build_BankMetamodel_Link : 
    forall (cler_arg:BankMetamodel_Reference), (BankMetamodel_getTypeByReference cler_arg) -> BankMetamodel_Link.

Definition BankModel : Model BankMetamodel_Object BankMetamodel_Link :=
  (Build_Model
     (     (Build_BankMetamodel_Object PersonClass (BuildPerson "0" "Zheng"))
        :: (Build_BankMetamodel_Object AccountClass (BuildAccount "010" "28976"))
        :: (Build_BankMetamodel_Object AccountClass (BuildAccount "011" "13333"))
        :: nil)
     (     (Build_BankMetamodel_Link PersonAccountsReference
              (BuildPersonAccounts
                (BuildPerson "0" "Zheng")
                ((BuildAccount "010" "28976")::(BuildAccount "011" "13333")::nil)))
        :: (Build_BankMetamodel_Link AccountBelongsReference
              (BuildAccountBelongs (BuildAccount "010" "28976") (BuildPerson "0" "Zheng")))
        :: (Build_BankMetamodel_Link AccountBelongsReference
              (BuildAccountBelongs (BuildAccount "011" "13333") (BuildPerson "0" "Zheng")))
        :: nil)
  ).

(* Coercion *)
Definition BankMetamodel_toObjectFromPerson (cl_arg :Person) : BankMetamodel_Object :=
  (Build_BankMetamodel_Object PersonClass cl_arg).
Coercion BankMetamodel_toObjectFromPerson : Person >-> BankMetamodel_Object.

Definition BankMetamodel_toObjectFromAccount (at_arg :Account) : BankMetamodel_Object :=
  (Build_BankMetamodel_Object AccountClass at_arg).
Coercion BankMetamodel_toObjectFromAccount : Account >-> BankMetamodel_Object.

Definition BankMetamodel_toEObject (cleo_arg : BankMetamodel_Object) : BankMetamodel_Object := cleo_arg.



(* test Coercion *)

Definition testCoercion (a : BankMetamodel_Object) : nat := 1.
Definition Zheng := (BuildPerson "0" "Zheng").

Compute (testCoercion Zheng).







