Definition rootNode (m : GraphModel) : Node :=
  hd (GraphMetamodel_defaultInstanceOfEClass NodeEClass)
     (GraphMetamodel_allInstances NodeEClass m).

Definition last' (l: list Node) : option Node := hd_error (rev l).

Fixpoint allPathsFix' (m: GraphModel) (l : nat) (path: list Node) :  list (list Node) :=
  match l with
  | S l' => 
    match (last' path) with
    | None => [ path ]
    | Some leaf =>
      match getNodeEdges leaf m with
      | None => [ path ]
      | Some children =>
              (concat  (map (fun child: Node => 
                        allPathsFix' m l' (path ++ [child]) ) children)) ++
              [ path ]
      end
    end
  | 0 => [ path ]
  end. 

Definition allPaths (m : GraphModel) (l : nat) : list (list Node) :=
  allPathsFix' m l [ rootNode m ].


Definition allPathsTo (m : GraphModel) (l : nat) (o: Node) : list (list Node) :=
  (filter (fun p =>
            match (last' p) with
             | Some lastNode => beq_Node lastNode o
             | None => false
            end
         ) (allPaths m l)).
		 
Graph2Tree' = 
fun (Graph2Tree : Phase GraphMetamodel GraphMetamodel (list Node)) (m : GraphModel) =>
(""%string,
BuildSingleElementRule GraphMetamodel NodeEClass (fun n : Metamodel.denoteModelClass NodeEClass => (true, allPathsTo m 2 n))
  (fun (n : Metamodel.denoteModelClass NodeEClass) (i : option (list Node)) =>
   BuildOutputPatternElement NodeEClass "n" (BuildNode newId (getNodeName n))
     (fun n' : Metamodel.denoteModelClass NodeEClass =>
      BuildOutputPatternElementReference GraphMetamodel NodeEdgesEReference
        (pth <- i;
         children <- getNodeEdges n m;
         iters <- return map (app pth) (singletons children);
         children' <- resolveAllWithIter ListNodeDataType (parsePhase Graph2Tree) m "n" NodeEClass (map (fun n0 : Node => [[n0]]) children) iters;
         return BuildNodeEdges n' children') :: nil) :: nil)) :: nil
     : Phase GraphMetamodel GraphMetamodel (list Node) -> GraphModel -> list (string * Rule GraphMetamodel GraphMetamodel (list Node))
