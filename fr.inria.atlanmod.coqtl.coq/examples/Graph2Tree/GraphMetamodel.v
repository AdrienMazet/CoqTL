
(********************************************************************
	@name Coq declarations for metamodel: <Graph>
	@date 2018/10/02 10:13:07
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import Bool.
Require Import String.
Require Import List.
Require Import Multiset.
Require Import ListSet.
Require Import Omega.
Require Import Coq.Logic.Eqdep_dec.

(* CoqTL libraries *)
Require Import core.utils.tTop.
Require Import core.Metamodel.
Require Import core.Model.
Require Import core.Object.

(* Base types *)
Inductive Node : Set :=
  BuildNode :
  (* id *) string ->
  (* name *) string ->
  Node.
  

Inductive NodeEdges : Set :=
   BuildNodeEdges :
   Node ->
   list Node ->
   NodeEdges.




(* Inheritence *)



Inductive GraphMetamodel_InheritReference : Set :=
.

(* Accessors *)
Definition getNodeId (n : Node) : string :=
  match n with BuildNode id name  => id end.
Definition getNodeName (n : Node) : string :=
  match n with BuildNode id name  => name end.
 
Definition setNodeId (n : Node) (s : string) : Node :=
  BuildNode s (getNodeName n).

Instance objectAttribute : Object Node :=
  {
    getId := getNodeId;
    setId := setNodeId;
  }.

(* Equality for Types *)
Definition beq_Node (no_arg1 : Node) (no_arg2 : Node) : bool :=
  beq_string (getNodeId no_arg1) (getNodeId no_arg2) && 
  beq_string (getNodeName no_arg1) (getNodeName no_arg2).

		
(* Meta-types *)
Inductive GraphMetamodel_EClass : Set :=
  | NodeEClass
.

Definition GraphMetamodel_getTypeByEClass (grec_arg : GraphMetamodel_EClass) : Set :=
  match grec_arg with
    | NodeEClass => Node
  end.

(**? confusing name convention **)
Definition GraphMetamodel_getEAttributeTypesByEClass (grec_arg : GraphMetamodel_EClass) : Set :=
  match grec_arg with
    | NodeEClass => (string * string)
  end.

Inductive GraphMetamodel_EReference : Set :=
| NodeEdgesEReference
.

Definition GraphMetamodel_getTypeByEReference (grer_arg : GraphMetamodel_EReference) : Set :=
  match grer_arg with
| NodeEdgesEReference => NodeEdges
  end.

(**? confusing name convention **)
Definition GraphMetamodel_getERoleTypesByEReference (grer_arg : GraphMetamodel_EReference) : Set :=
  match grer_arg with
| NodeEdgesEReference => (Node * list Node)
  end.

(* Generic types *)





(**? Changed Ctr name **)
Inductive GraphMetamodel_EObject : Set :=
 | Build_GraphMetamodel_EObject : 
    forall (grec_arg: GraphMetamodel_EClass), (GraphMetamodel_getTypeByEClass grec_arg) -> GraphMetamodel_EObject.

Inductive GraphMetamodel_ELink : Set :=
 | Build_GraphMetamodel_ELink : 
    forall (grer_arg:GraphMetamodel_EReference), (GraphMetamodel_getTypeByEReference grer_arg) -> GraphMetamodel_ELink.

(* Reflective functions *)
(*TODO*)
Lemma GraphMetamodel_Node_dec : 
 forall (grec_arg1: Node) (grec_arg2:Node), { grec_arg1 = grec_arg2 } + { grec_arg1 <> grec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma GraphMetamodel_eqEClass_dec : 
 forall (grec_arg1:GraphMetamodel_EClass) (grec_arg2:GraphMetamodel_EClass), { grec_arg1 = grec_arg2 } + { grec_arg1 <> grec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma GraphMetamodel_eqEReference_dec : 
 forall (grer_arg1:GraphMetamodel_EReference) (grer_arg2:GraphMetamodel_EReference), { grer_arg1 = grer_arg2 } + { grer_arg1 <> grer_arg2 }.
Proof. repeat decide equality. Defined.

Definition GraphMetamodel_getEClass (greo_arg : GraphMetamodel_EObject) : GraphMetamodel_EClass :=
   match greo_arg with
  | (Build_GraphMetamodel_EObject greo_arg _) => greo_arg
   end.

Definition GraphMetamodel_getEReference (grel_arg : GraphMetamodel_ELink) : GraphMetamodel_EReference :=
   match grel_arg with
  | (Build_GraphMetamodel_ELink grel_arg _) => grel_arg
   end.

Definition GraphMetamodel_instanceOfEClass (grec_arg: GraphMetamodel_EClass) (greo_arg : GraphMetamodel_EObject): bool :=
  if GraphMetamodel_eqEClass_dec (GraphMetamodel_getEClass greo_arg) grec_arg then true else false.

Definition GraphMetamodel_instanceOfEReference (grer_arg: GraphMetamodel_EReference) (grel_arg : GraphMetamodel_ELink): bool :=
  if GraphMetamodel_eqEReference_dec (GraphMetamodel_getEReference grel_arg) grer_arg then true else false.

(** Helper of building EObject for model **)
Definition GraphMetamodel_getEObjectFromEAttributeValues (grec_arg : GraphMetamodel_EClass) : (GraphMetamodel_getEAttributeTypesByEClass grec_arg) -> GraphMetamodel_EObject :=
  match grec_arg with
    | NodeEClass => (fun (p: (string * string)) => (Build_GraphMetamodel_EObject NodeEClass (BuildNode (fst p) (snd p))))
  end.

(** Helper of building ELink for model **)
Definition GraphMetamodel_getELinkFromERoleValues (grer_arg : GraphMetamodel_EReference) : (GraphMetamodel_getERoleTypesByEReference grer_arg) -> GraphMetamodel_ELink :=
  match grer_arg with
| NodeEdgesEReference => (fun (p: (Node * list Node)) => (Build_GraphMetamodel_ELink NodeEdgesEReference (BuildNodeEdges (fst p) (snd p))))
  end.

Definition GraphMetamodel_toEClass (grec_arg : GraphMetamodel_EClass) (greo_arg : GraphMetamodel_EObject) : option (GraphMetamodel_getTypeByEClass grec_arg).
Proof.
  destruct greo_arg as [arg1 arg2].
  destruct (GraphMetamodel_eqEClass_dec arg1 grec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition GraphMetamodel_toEReference (grer_arg : GraphMetamodel_EReference) (grel_arg : GraphMetamodel_ELink) : option (GraphMetamodel_getTypeByEReference grer_arg).
Proof.
  destruct grel_arg as [arg1 arg2].
  destruct (GraphMetamodel_eqEReference_dec arg1 grer_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition GraphMetamodel_toEObjectFromNode (no_arg :Node) : GraphMetamodel_EObject :=
  (Build_GraphMetamodel_EObject NodeEClass no_arg).
Coercion GraphMetamodel_toEObjectFromNode : Node >-> GraphMetamodel_EObject.


(**? what are these for **)
Definition GraphMetamodel_toEObject (greo_arg : GraphMetamodel_EObject) : GraphMetamodel_EObject := greo_arg.
Definition GraphMetamodel_toELink (grel_arg : GraphMetamodel_ELink) : GraphMetamodel_ELink := grel_arg.
Definition GraphModel := Model GraphMetamodel_EObject GraphMetamodel_ELink.

Definition GraphMetamodel_toEObjectOfEClass (grec_arg: GraphMetamodel_EClass) (t: GraphMetamodel_getTypeByEClass grec_arg) : GraphMetamodel_EObject :=
  (Build_GraphMetamodel_EObject grec_arg t).

Definition GraphMetamodel_toELinkOfEReference (grer_arg: GraphMetamodel_EReference) (t: GraphMetamodel_getTypeByEReference grer_arg) : GraphMetamodel_ELink :=
		  (Build_GraphMetamodel_ELink grer_arg t).
		  
Fixpoint GraphMetamodel_getNodeEdgesOnLinks (no_arg : Node) (l : list GraphMetamodel_ELink) : option (list Node) :=
match l with
| (Build_GraphMetamodel_ELink NodeEdgesEReference (BuildNodeEdges Node_ctr edges_ctr)) :: l' => 
	  if beq_Node Node_ctr no_arg then Some edges_ctr else GraphMetamodel_getNodeEdgesOnLinks no_arg l'
| nil => None
end.

Definition getNodeEdges (no_arg : Node) (m : GraphModel) : option (list Node) :=
  GraphMetamodel_getNodeEdgesOnLinks no_arg (@allModelLinks _ _ m).

Definition GraphMetamodel_allInstances (grec_arg: GraphMetamodel_EClass) (m: GraphModel): list (GraphMetamodel_getTypeByEClass grec_arg) :=
  optionList2List (map (GraphMetamodel_toEClass grec_arg)  (filter (GraphMetamodel_instanceOfEClass grec_arg) (@allModelElements _ _ m))).

Definition GraphMetamodel_defaultInstanceOfEClass (grec_arg: GraphMetamodel_EClass) : (GraphMetamodel_getTypeByEClass grec_arg) :=
  match grec_arg with
  | NodeEClass => (BuildNode "" "")
  end.

Definition GraphMetamodel_defaultInstanceOfEReference (grec_arg: GraphMetamodel_EReference) : (GraphMetamodel_getTypeByEReference grec_arg) :=
  match grec_arg with
  | NodeEdgesEReference => BuildNodeEdges (BuildNode "" "") nil
  end.

Definition GraphMetamodel_getId (a : GraphMetamodel_EObject) : string.
Proof.
  destruct a.
  destruct grec_arg.
  * simpl in g. exact (getNodeId g).
Defined.

Definition GraphMetamodel_setId (a : GraphMetamodel_EObject) (s: string) : GraphMetamodel_EObject.
Proof.
  destruct a.
  destruct grec_arg.
  * simpl in g. exact (setNodeId g s).
Defined.

Instance GraphMetamodel_Typing_Elem : Typing GraphMetamodel_EObject GraphMetamodel_EClass :=
{
  denoteClass := GraphMetamodel_getTypeByEClass;
  toSubElement := GraphMetamodel_toEClass;
  toTopElement := GraphMetamodel_toEObjectOfEClass;
  DefaultElements := GraphMetamodel_defaultInstanceOfEClass;
}.

Instance GraphMetamodel_Typing_Link : Typing GraphMetamodel_ELink GraphMetamodel_EReference :=
{
  denoteClass := GraphMetamodel_getTypeByEReference;
  toSubElement := GraphMetamodel_toEReference;
  toTopElement := GraphMetamodel_toELinkOfEReference;
  DefaultElements := GraphMetamodel_defaultInstanceOfEReference;
}.

Instance GraphMetamodel_Dec_Class : Decidability GraphMetamodel_EClass :=
{
  eq_dec := GraphMetamodel_eqEClass_dec
}.

Instance GraphMetamodel_Dec_Reference : Decidability GraphMetamodel_EReference :=
{
  eq_dec := GraphMetamodel_eqEReference_dec
}.

Instance GraphMetamodel_Object_Elem : Object GraphMetamodel_EObject:=
{
  getId := GraphMetamodel_getId;
  setId := GraphMetamodel_setId;
}.

(* Typeclass Instance *)
Instance GraphMetamodel : Metamodel GraphMetamodel_EObject GraphMetamodel_ELink GraphMetamodel_EClass GraphMetamodel_EReference :=
  {}.

(* Useful lemmas *)
Lemma Graph_invert : 
  forall (grec_arg: GraphMetamodel_EClass) (t1 t2: GraphMetamodel_getTypeByEClass grec_arg), Build_GraphMetamodel_EObject grec_arg t1 = Build_GraphMetamodel_EObject grec_arg t2 -> t1 = t2.
Proof.
  intros.
  inversion H.
  apply inj_pair2_eq_dec in H1.
  exact H1.
  apply GraphMetamodel_eqEClass_dec.
Qed.
