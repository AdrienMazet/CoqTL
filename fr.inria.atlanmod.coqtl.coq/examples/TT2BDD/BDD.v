
(********************************************************************
	@name Coq declarations for metamodel: <BDD>
	@date 2019/06/06 21:10:23
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import String.
Require Import List.      (* sequence *)
Require Import Multiset.  (* bag *)
Require Import ListSet.   (* set *)
Require Import Omega.
Require Import Bool.

Require Import core.utils.TopUtils.
Require Import core.Metamodel.
Require Import core.Model.

Require Import Coq.Logic.Eqdep_dec.

(* Base types *)
Inductive BDD : Set :=
  BuildBDD :
  (* hash code id *) string ->
  (* name *) string ->
  BDD.
  
Inductive Port : Set :=
  BuildPort :
  (* hash code id *) string ->
  (* name *) string ->
  Port.
  
Inductive InputPort : Set :=
  BuildInputPort :
  (* Inheritence Attribute *) Port -> 
  (* hash code id *) string ->
  InputPort.
  
Inductive OutputPort : Set :=
  BuildOutputPort :
  (* Inheritence Attribute *) Port -> 
  (* hash code id *) string ->
  OutputPort.
  
Inductive Tree : Set :=
  BuildTree :
  (* hash code id *) string ->
  Tree.
  
Inductive Leaf : Set :=
  BuildLeaf :
  (* Inheritence Attribute *) Tree -> 
  (* hash code id *) string ->
  Leaf.
  
Inductive Assignment : Set :=
  BuildAssignment :
  (* hash code id *) string ->
  (* value *) bool ->
  Assignment.
  
Inductive Subtree : Set :=
  BuildSubtree :
  (* Inheritence Attribute *) Tree -> 
  (* hash code id *) string ->
  Subtree.
  

Inductive BDDPorts : Set :=
   BuildBDDPorts :
   BDD ->
   list Port ->
   BDDPorts.
Inductive BDDTree : Set :=
   BuildBDDTree :
   BDD ->
   Tree ->
   BDDTree.

Inductive PortOwner : Set :=
   BuildPortOwner :
   Port ->
   BDD ->
   PortOwner.

Inductive InputPortSubtrees : Set :=
   BuildInputPortSubtrees :
   InputPort ->
   list Subtree ->
   InputPortSubtrees.

Inductive OutputPortAssignments : Set :=
   BuildOutputPortAssignments :
   OutputPort ->
   list Assignment ->
   OutputPortAssignments.

Inductive TreeOwnerBDD : Set :=
   BuildTreeOwnerBDD :
   Tree ->
   BDD ->
   TreeOwnerBDD.
Inductive TreeOwnerSubtreeForZero : Set :=
   BuildTreeOwnerSubtreeForZero :
   Tree ->
   Subtree ->
   TreeOwnerSubtreeForZero.
Inductive TreeOwnerSubtreeForOne : Set :=
   BuildTreeOwnerSubtreeForOne :
   Tree ->
   Subtree ->
   TreeOwnerSubtreeForOne.

Inductive LeafAssignments : Set :=
   BuildLeafAssignments :
   Leaf ->
   list Assignment ->
   LeafAssignments.

Inductive AssignmentPort : Set :=
   BuildAssignmentPort :
   Assignment ->
   OutputPort ->
   AssignmentPort.
Inductive AssignmentOwner : Set :=
   BuildAssignmentOwner :
   Assignment ->
   Leaf ->
   AssignmentOwner.

Inductive SubtreePort : Set :=
   BuildSubtreePort :
   Subtree ->
   InputPort ->
   SubtreePort.
Inductive SubtreeTreeForZero : Set :=
   BuildSubtreeTreeForZero :
   Subtree ->
   Tree ->
   SubtreeTreeForZero.
Inductive SubtreeTreeForOne : Set :=
   BuildSubtreeTreeForOne :
   Subtree ->
   Tree ->
   SubtreeTreeForOne.



(* Accessors *)
Definition BDD_getHashCodeId (b : BDD) : string :=
  match b with BuildBDD  hash name  => hash end.
Definition BDD_getName (b : BDD) : string :=
  match b with BuildBDD  hash name  => name end.
 
Definition Port_getHashCodeId (p : Port) : string :=
  match p with BuildPort  hash name  => hash end.
Definition Port_getName (p : Port) : string :=
  match p with BuildPort  hash name  => name end.
 
Definition InputPort_getPort (i : InputPort) : Port :=
  match i with BuildInputPort port hash  => port end.
Definition InputPort_getHashCodeId (i : InputPort) : string :=
  match i with BuildInputPort port hash  => hash end.
 
Definition OutputPort_getPort (o : OutputPort) : Port :=
  match o with BuildOutputPort port hash  => port end.
Definition OutputPort_getHashCodeId (o : OutputPort) : string :=
  match o with BuildOutputPort port hash  => hash end.
 
Definition Tree_getHashCodeId (t : Tree) : string :=
  match t with BuildTree  hash  => hash end.
 
Definition Leaf_getTree (l : Leaf) : Tree :=
  match l with BuildLeaf tree hash  => tree end.
Definition Leaf_getHashCodeId (l : Leaf) : string :=
  match l with BuildLeaf tree hash  => hash end.
 
Definition Assignment_getHashCodeId (a : Assignment) : string :=
  match a with BuildAssignment  hash value  => hash end.
Definition Assignment_getValue (a : Assignment) : bool :=
  match a with BuildAssignment  hash value  => value end.
 
Definition Subtree_getTree (s : Subtree) : Tree :=
  match s with BuildSubtree tree hash  => tree end.
Definition Subtree_getHashCodeId (s : Subtree) : string :=
  match s with BuildSubtree tree hash  => hash end.
 


		
(* Meta-types *)
Inductive BDDMetamodel_EClass : Set :=
  | BDDEClass
  | PortEClass
  | InputPortEClass
  | OutputPortEClass
  | TreeEClass
  | LeafEClass
  | AssignmentEClass
  | SubtreeEClass
.

Definition BDDMetamodel_getTypeByEClass (bdec_arg : BDDMetamodel_EClass) : Set :=
  match bdec_arg with
    | BDDEClass => BDD
    | PortEClass => Port
    | InputPortEClass => InputPort
    | OutputPortEClass => OutputPort
    | TreeEClass => Tree
    | LeafEClass => Leaf
    | AssignmentEClass => Assignment
    | SubtreeEClass => Subtree
  end.	

Definition BDDMetamodel_getEAttributeTypesByEClass (bdec_arg : BDDMetamodel_EClass) : Set :=
  match bdec_arg with
    | BDDEClass => 
    (string)
    | PortEClass => 
    (string)
    | InputPortEClass => 
    (Port)
    | OutputPortEClass => 
    (Port)
    | TreeEClass => 
    (Empty_set)
    | LeafEClass => 
    (Tree)
    | AssignmentEClass => 
    (bool)
    | SubtreeEClass => 
    (Tree)
  end.

Inductive BDDMetamodel_EReference : Set :=
| BDDPortsEReference
| BDDTreeEReference
| PortOwnerEReference
| InputPortSubtreesEReference
| OutputPortAssignmentsEReference
| TreeOwnerBDDEReference
| TreeOwnerSubtreeForZeroEReference
| TreeOwnerSubtreeForOneEReference
| LeafAssignmentsEReference
| AssignmentPortEReference
| AssignmentOwnerEReference
| SubtreePortEReference
| SubtreeTreeForZeroEReference
| SubtreeTreeForOneEReference
.

Definition BDDMetamodel_getTypeByEReference (bder_arg : BDDMetamodel_EReference) : Set :=
  match bder_arg with
| BDDPortsEReference => BDDPorts
| BDDTreeEReference => BDDTree
| PortOwnerEReference => PortOwner
| InputPortSubtreesEReference => InputPortSubtrees
| OutputPortAssignmentsEReference => OutputPortAssignments
| TreeOwnerBDDEReference => TreeOwnerBDD
| TreeOwnerSubtreeForZeroEReference => TreeOwnerSubtreeForZero
| TreeOwnerSubtreeForOneEReference => TreeOwnerSubtreeForOne
| LeafAssignmentsEReference => LeafAssignments
| AssignmentPortEReference => AssignmentPort
| AssignmentOwnerEReference => AssignmentOwner
| SubtreePortEReference => SubtreePort
| SubtreeTreeForZeroEReference => SubtreeTreeForZero
| SubtreeTreeForOneEReference => SubtreeTreeForOne
  end.

Definition BDDMetamodel_getERoleTypesByEReference (bder_arg : BDDMetamodel_EReference) : Set :=
  match bder_arg with
| BDDPortsEReference => (BDD * list Port)
| BDDTreeEReference => (BDD * Tree)
| PortOwnerEReference => (Port * BDD)
| InputPortSubtreesEReference => (InputPort * list Subtree)
| OutputPortAssignmentsEReference => (OutputPort * list Assignment)
| TreeOwnerBDDEReference => (Tree * BDD)
| TreeOwnerSubtreeForZeroEReference => (Tree * Subtree)
| TreeOwnerSubtreeForOneEReference => (Tree * Subtree)
| LeafAssignmentsEReference => (Leaf * list Assignment)
| AssignmentPortEReference => (Assignment * OutputPort)
| AssignmentOwnerEReference => (Assignment * Leaf)
| SubtreePortEReference => (Subtree * InputPort)
| SubtreeTreeForZeroEReference => (Subtree * Tree)
| SubtreeTreeForOneEReference => (Subtree * Tree)
  end.

(* Generic types *)





Inductive BDDMetamodel_EObject : Set :=
 | Build_BDDMetamodel_EObject : 
    forall (bdec_arg: BDDMetamodel_EClass), (BDDMetamodel_getTypeByEClass bdec_arg) -> BDDMetamodel_EObject.

Inductive BDDMetamodel_ELink : Set :=
 | Build_BDDMetamodel_ELink : 
    forall (bder_arg:BDDMetamodel_EReference), (BDDMetamodel_getTypeByEReference bder_arg) -> BDDMetamodel_ELink.

(* Reflective functions *)

Lemma BDDMetamodel_eqEClass_dec : 
 forall (bdec_arg1:BDDMetamodel_EClass) (bdec_arg2:BDDMetamodel_EClass), { bdec_arg1 = bdec_arg2 } + { bdec_arg1 <> bdec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma BDDMetamodel_eqEReference_dec : 
 forall (bder_arg1:BDDMetamodel_EReference) (bder_arg2:BDDMetamodel_EReference), { bder_arg1 = bder_arg2 } + { bder_arg1 <> bder_arg2 }.
Proof. repeat decide equality. Defined.

Definition BDDMetamodel_getEClass (bdeo_arg : BDDMetamodel_EObject) : BDDMetamodel_EClass :=
   match bdeo_arg with
  | (Build_BDDMetamodel_EObject bdeo_arg _) => bdeo_arg
   end.

Definition BDDMetamodel_getEReference (bdel_arg : BDDMetamodel_ELink) : BDDMetamodel_EReference :=
   match bdel_arg with
  | (Build_BDDMetamodel_ELink bdel_arg _) => bdel_arg
   end.

Definition BDDMetamodel_instanceOfEClass (bdec_arg: BDDMetamodel_EClass) (bdeo_arg : BDDMetamodel_EObject): bool :=
  if BDDMetamodel_eqEClass_dec (BDDMetamodel_getEClass bdeo_arg) bdec_arg then true else false.

Definition BDDMetamodel_instanceOfEReference (bder_arg: BDDMetamodel_EReference) (bdel_arg : BDDMetamodel_ELink): bool :=
  if BDDMetamodel_eqEReference_dec (BDDMetamodel_getEReference bdel_arg) bder_arg then true else false.


Definition BDDMetamodel_toEClass (bdec_arg : BDDMetamodel_EClass) (bdeo_arg : BDDMetamodel_EObject) : option (BDDMetamodel_getTypeByEClass bdec_arg).
Proof.
  destruct bdeo_arg as [arg1 arg2].
  destruct (BDDMetamodel_eqEClass_dec arg1 bdec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition BDDMetamodel_toEReference (bder_arg : BDDMetamodel_EReference) (bdel_arg : BDDMetamodel_ELink) : option (BDDMetamodel_getTypeByEReference bder_arg).
Proof.
  destruct bdel_arg as [arg1 arg2].
  destruct (BDDMetamodel_eqEReference_dec arg1 bder_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition BDDMetamodel_toEObjectFromBDD (bd_arg :BDD) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject BDDEClass bd_arg).
Coercion BDDMetamodel_toEObjectFromBDD : BDD >-> BDDMetamodel_EObject.

Definition BDDMetamodel_toEObjectFromPort (po_arg :Port) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject PortEClass po_arg).
Coercion BDDMetamodel_toEObjectFromPort : Port >-> BDDMetamodel_EObject.

Definition BDDMetamodel_toEObjectFromInputPort (in_arg :InputPort) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject InputPortEClass in_arg).
Coercion BDDMetamodel_toEObjectFromInputPort : InputPort >-> BDDMetamodel_EObject.

Definition BDDMetamodel_toEObjectFromOutputPort (ou_arg :OutputPort) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject OutputPortEClass ou_arg).
Coercion BDDMetamodel_toEObjectFromOutputPort : OutputPort >-> BDDMetamodel_EObject.

Definition BDDMetamodel_toEObjectFromTree (tr_arg :Tree) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject TreeEClass tr_arg).
Coercion BDDMetamodel_toEObjectFromTree : Tree >-> BDDMetamodel_EObject.

Definition BDDMetamodel_toEObjectFromLeaf (le_arg :Leaf) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject LeafEClass le_arg).
Coercion BDDMetamodel_toEObjectFromLeaf : Leaf >-> BDDMetamodel_EObject.

Definition BDDMetamodel_toEObjectFromAssignment (as_arg :Assignment) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject AssignmentEClass as_arg).
Coercion BDDMetamodel_toEObjectFromAssignment : Assignment >-> BDDMetamodel_EObject.

Definition BDDMetamodel_toEObjectFromSubtree (su_arg :Subtree) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject SubtreeEClass su_arg).
Coercion BDDMetamodel_toEObjectFromSubtree : Subtree >-> BDDMetamodel_EObject.


(** Metamodel Type Class Instaniation **)
Definition BDDMetamodel_toEObject (bdeo_arg : BDDMetamodel_EObject) : BDDMetamodel_EObject := bdeo_arg.
Definition BDDMetamodel_toELink (bdel_arg : BDDMetamodel_ELink) : BDDMetamodel_ELink := bdel_arg.
Definition BDDModel := Model BDDMetamodel_EObject BDDMetamodel_ELink.

Definition BDDMetamodel_toEObjectOfEClass (bdec_arg: BDDMetamodel_EClass) (t: BDDMetamodel_getTypeByEClass bdec_arg) : BDDMetamodel_EObject :=
  (Build_BDDMetamodel_EObject bdec_arg t).

Definition BDDMetamodel_toELinkOfEReference (bder_arg: BDDMetamodel_EReference) (t: BDDMetamodel_getTypeByEReference bder_arg) : BDDMetamodel_ELink :=
		  (Build_BDDMetamodel_ELink bder_arg t).


(* Accessors on model *)
(* Equality for Types *)
(*? We currently define eq for Eclass on their fist attribute *)
Definition beq_BDD (bd_arg1 : BDD) (bd_arg2 : BDD) : bool :=
( beq_string (BDD_getName bd_arg1) (BDD_getName bd_arg2) )
.

Definition beq_Port (po_arg1 : Port) (po_arg2 : Port) : bool :=
( beq_string (Port_getName po_arg1) (Port_getName po_arg2) )
.

Definition beq_InputPort (in_arg1 : InputPort) (in_arg2 : InputPort) : bool :=
beq_Port (InputPort_getPort in_arg1) (InputPort_getPort in_arg2)
.

Definition beq_OutputPort (ou_arg1 : OutputPort) (ou_arg2 : OutputPort) : bool :=
beq_Port (OutputPort_getPort ou_arg1) (OutputPort_getPort ou_arg2)
.

Definition beq_Tree (tr_arg1 : Tree) (tr_arg2 : Tree) : bool :=
(true)
.

Definition beq_Leaf (le_arg1 : Leaf) (le_arg2 : Leaf) : bool :=
beq_Tree (Leaf_getTree le_arg1) (Leaf_getTree le_arg2)
.

Definition beq_Assignment (as_arg1 : Assignment) (as_arg2 : Assignment) : bool :=
( beq_bool (Assignment_getValue as_arg1) (Assignment_getValue as_arg2) )
.

Definition beq_Subtree (su_arg1 : Subtree) (su_arg2 : Subtree) : bool :=
beq_Tree (Subtree_getTree su_arg1) (Subtree_getTree su_arg2)
.



Fixpoint BDDMetamodel_Tree_downcastLeaf (tr_arg : Tree) (l : list BDDMetamodel_EObject) : option Leaf := 
  match l with
	 | Build_BDDMetamodel_EObject LeafEClass (BuildLeaf eSuper hash ) :: l' => 
		if beq_Tree tr_arg eSuper then (Some (BuildLeaf eSuper hash )) else (BDDMetamodel_Tree_downcastLeaf tr_arg l')
	 | _ :: l' => (BDDMetamodel_Tree_downcastLeaf tr_arg l')
	 | nil => None
end.

Definition Tree_downcastLeaf (tr_arg : Tree) (m : BDDModel) : option Leaf :=
  BDDMetamodel_Tree_downcastLeaf tr_arg (@allModelElements _ _ m).

Fixpoint BDDMetamodel_Tree_downcastSubtree (tr_arg : Tree) (l : list BDDMetamodel_EObject) : option Subtree := 
  match l with
	 | Build_BDDMetamodel_EObject SubtreeEClass (BuildSubtree eSuper hash ) :: l' => 
		if beq_Tree tr_arg eSuper then (Some (BuildSubtree eSuper hash )) else (BDDMetamodel_Tree_downcastSubtree tr_arg l')
	 | _ :: l' => (BDDMetamodel_Tree_downcastSubtree tr_arg l')
	 | nil => None
end.

Definition Tree_downcastSubtree (tr_arg : Tree) (m : BDDModel) : option Subtree :=
  BDDMetamodel_Tree_downcastSubtree tr_arg (@allModelElements _ _ m).


Fixpoint BDDMetamodel_Port_downcastInputPort (po_arg : Port) (l : list BDDMetamodel_EObject) : option InputPort := 
  match l with
	 | Build_BDDMetamodel_EObject InputPortEClass (BuildInputPort eSuper hash ) :: l' => 
		if beq_Port po_arg eSuper then (Some (BuildInputPort eSuper hash )) else (BDDMetamodel_Port_downcastInputPort po_arg l')
	 | _ :: l' => (BDDMetamodel_Port_downcastInputPort po_arg l')
	 | nil => None
end.

Definition Port_downcastInputPort (po_arg : Port) (m : BDDModel) : option InputPort :=
  BDDMetamodel_Port_downcastInputPort po_arg (@allModelElements _ _ m).

Fixpoint BDDMetamodel_Port_downcastOutputPort (po_arg : Port) (l : list BDDMetamodel_EObject) : option OutputPort := 
  match l with
	 | Build_BDDMetamodel_EObject OutputPortEClass (BuildOutputPort eSuper hash ) :: l' => 
		if beq_Port po_arg eSuper then (Some (BuildOutputPort eSuper hash )) else (BDDMetamodel_Port_downcastOutputPort po_arg l')
	 | _ :: l' => (BDDMetamodel_Port_downcastOutputPort po_arg l')
	 | nil => None
end.

Definition Port_downcastOutputPort (po_arg : Port) (m : BDDModel) : option OutputPort :=
  BDDMetamodel_Port_downcastOutputPort po_arg (@allModelElements _ _ m).



Fixpoint BDD_getPortsOnLinks (bd_arg : BDD) (l : list BDDMetamodel_ELink) : option (list Port) :=
match l with
| (Build_BDDMetamodel_ELink BDDPortsEReference (BuildBDDPorts BDD_ctr ports_ctr)) :: l' => 
	  if beq_BDD BDD_ctr bd_arg then Some ports_ctr else BDD_getPortsOnLinks bd_arg l'
| _ :: l' => BDD_getPortsOnLinks bd_arg l'
| nil => None
end.

Definition BDD_getPorts (bd_arg : BDD) (m : BDDModel) : option (list Port) :=
  BDD_getPortsOnLinks bd_arg (@allModelLinks _ _ m).
Fixpoint BDD_getTreeOnLinks (bd_arg : BDD) (l : list BDDMetamodel_ELink) : option (Tree) :=
match l with
| (Build_BDDMetamodel_ELink BDDTreeEReference (BuildBDDTree BDD_ctr tree_ctr)) :: l' => 
	  if beq_BDD BDD_ctr bd_arg then Some tree_ctr else BDD_getTreeOnLinks bd_arg l'
| _ :: l' => BDD_getTreeOnLinks bd_arg l'
| nil => None
end.

Definition BDD_getTree (bd_arg : BDD) (m : BDDModel) : option (Tree) :=
  BDD_getTreeOnLinks bd_arg (@allModelLinks _ _ m).

Fixpoint Port_getOwnerOnLinks (po_arg : Port) (l : list BDDMetamodel_ELink) : option (BDD) :=
match l with
| (Build_BDDMetamodel_ELink PortOwnerEReference (BuildPortOwner Port_ctr owner_ctr)) :: l' => 
	  if beq_Port Port_ctr po_arg then Some owner_ctr else Port_getOwnerOnLinks po_arg l'
| _ :: l' => Port_getOwnerOnLinks po_arg l'
| nil => None
end.

Definition Port_getOwner (po_arg : Port) (m : BDDModel) : option (BDD) :=
  Port_getOwnerOnLinks po_arg (@allModelLinks _ _ m).

Fixpoint InputPort_getSubtreesOnLinks (in_arg : InputPort) (l : list BDDMetamodel_ELink) : option (list Subtree) :=
match l with
| (Build_BDDMetamodel_ELink InputPortSubtreesEReference (BuildInputPortSubtrees InputPort_ctr subtrees_ctr)) :: l' => 
	  if beq_InputPort InputPort_ctr in_arg then Some subtrees_ctr else InputPort_getSubtreesOnLinks in_arg l'
| _ :: l' => InputPort_getSubtreesOnLinks in_arg l'
| nil => None
end.

Definition InputPort_getSubtrees (in_arg : InputPort) (m : BDDModel) : option (list Subtree) :=
  InputPort_getSubtreesOnLinks in_arg (@allModelLinks _ _ m).

Fixpoint OutputPort_getAssignmentsOnLinks (ou_arg : OutputPort) (l : list BDDMetamodel_ELink) : option (list Assignment) :=
match l with
| (Build_BDDMetamodel_ELink OutputPortAssignmentsEReference (BuildOutputPortAssignments OutputPort_ctr assignments_ctr)) :: l' => 
	  if beq_OutputPort OutputPort_ctr ou_arg then Some assignments_ctr else OutputPort_getAssignmentsOnLinks ou_arg l'
| _ :: l' => OutputPort_getAssignmentsOnLinks ou_arg l'
| nil => None
end.

Definition OutputPort_getAssignments (ou_arg : OutputPort) (m : BDDModel) : option (list Assignment) :=
  OutputPort_getAssignmentsOnLinks ou_arg (@allModelLinks _ _ m).

Fixpoint Tree_getOwnerBDDOnLinks (tr_arg : Tree) (l : list BDDMetamodel_ELink) : option (BDD) :=
match l with
| (Build_BDDMetamodel_ELink TreeOwnerBDDEReference (BuildTreeOwnerBDD Tree_ctr ownerBDD_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some ownerBDD_ctr else Tree_getOwnerBDDOnLinks tr_arg l'
| _ :: l' => Tree_getOwnerBDDOnLinks tr_arg l'
| nil => None
end.

Definition Tree_getOwnerBDD (tr_arg : Tree) (m : BDDModel) : option (BDD) :=
  Tree_getOwnerBDDOnLinks tr_arg (@allModelLinks _ _ m).
Fixpoint Tree_getOwnerSubtreeForZeroOnLinks (tr_arg : Tree) (l : list BDDMetamodel_ELink) : option (Subtree) :=
match l with
| (Build_BDDMetamodel_ELink TreeOwnerSubtreeForZeroEReference (BuildTreeOwnerSubtreeForZero Tree_ctr ownerSubtreeForZero_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some ownerSubtreeForZero_ctr else Tree_getOwnerSubtreeForZeroOnLinks tr_arg l'
| _ :: l' => Tree_getOwnerSubtreeForZeroOnLinks tr_arg l'
| nil => None
end.

Definition Tree_getOwnerSubtreeForZero (tr_arg : Tree) (m : BDDModel) : option (Subtree) :=
  Tree_getOwnerSubtreeForZeroOnLinks tr_arg (@allModelLinks _ _ m).
Fixpoint Tree_getOwnerSubtreeForOneOnLinks (tr_arg : Tree) (l : list BDDMetamodel_ELink) : option (Subtree) :=
match l with
| (Build_BDDMetamodel_ELink TreeOwnerSubtreeForOneEReference (BuildTreeOwnerSubtreeForOne Tree_ctr ownerSubtreeForOne_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some ownerSubtreeForOne_ctr else Tree_getOwnerSubtreeForOneOnLinks tr_arg l'
| _ :: l' => Tree_getOwnerSubtreeForOneOnLinks tr_arg l'
| nil => None
end.

Definition Tree_getOwnerSubtreeForOne (tr_arg : Tree) (m : BDDModel) : option (Subtree) :=
  Tree_getOwnerSubtreeForOneOnLinks tr_arg (@allModelLinks _ _ m).

Fixpoint Leaf_getAssignmentsOnLinks (le_arg : Leaf) (l : list BDDMetamodel_ELink) : option (list Assignment) :=
match l with
| (Build_BDDMetamodel_ELink LeafAssignmentsEReference (BuildLeafAssignments Leaf_ctr assignments_ctr)) :: l' => 
	  if beq_Leaf Leaf_ctr le_arg then Some assignments_ctr else Leaf_getAssignmentsOnLinks le_arg l'
| _ :: l' => Leaf_getAssignmentsOnLinks le_arg l'
| nil => None
end.

Definition Leaf_getAssignments (le_arg : Leaf) (m : BDDModel) : option (list Assignment) :=
  Leaf_getAssignmentsOnLinks le_arg (@allModelLinks _ _ m).

Fixpoint Assignment_getPortOnLinks (as_arg : Assignment) (l : list BDDMetamodel_ELink) : option (OutputPort) :=
match l with
| (Build_BDDMetamodel_ELink AssignmentPortEReference (BuildAssignmentPort Assignment_ctr port_ctr)) :: l' => 
	  if beq_Assignment Assignment_ctr as_arg then Some port_ctr else Assignment_getPortOnLinks as_arg l'
| _ :: l' => Assignment_getPortOnLinks as_arg l'
| nil => None
end.

Definition Assignment_getPort (as_arg : Assignment) (m : BDDModel) : option (OutputPort) :=
  Assignment_getPortOnLinks as_arg (@allModelLinks _ _ m).
Fixpoint Assignment_getOwnerOnLinks (as_arg : Assignment) (l : list BDDMetamodel_ELink) : option (Leaf) :=
match l with
| (Build_BDDMetamodel_ELink AssignmentOwnerEReference (BuildAssignmentOwner Assignment_ctr owner_ctr)) :: l' => 
	  if beq_Assignment Assignment_ctr as_arg then Some owner_ctr else Assignment_getOwnerOnLinks as_arg l'
| _ :: l' => Assignment_getOwnerOnLinks as_arg l'
| nil => None
end.

Definition Assignment_getOwner (as_arg : Assignment) (m : BDDModel) : option (Leaf) :=
  Assignment_getOwnerOnLinks as_arg (@allModelLinks _ _ m).

Fixpoint Subtree_getPortOnLinks (su_arg : Subtree) (l : list BDDMetamodel_ELink) : option (InputPort) :=
match l with
| (Build_BDDMetamodel_ELink SubtreePortEReference (BuildSubtreePort Subtree_ctr port_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some port_ctr else Subtree_getPortOnLinks su_arg l'
| _ :: l' => Subtree_getPortOnLinks su_arg l'
| nil => None
end.

Definition Subtree_getPort (su_arg : Subtree) (m : BDDModel) : option (InputPort) :=
  Subtree_getPortOnLinks su_arg (@allModelLinks _ _ m).
Fixpoint Subtree_getTreeForZeroOnLinks (su_arg : Subtree) (l : list BDDMetamodel_ELink) : option (Tree) :=
match l with
| (Build_BDDMetamodel_ELink SubtreeTreeForZeroEReference (BuildSubtreeTreeForZero Subtree_ctr treeForZero_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some treeForZero_ctr else Subtree_getTreeForZeroOnLinks su_arg l'
| _ :: l' => Subtree_getTreeForZeroOnLinks su_arg l'
| nil => None
end.

Definition Subtree_getTreeForZero (su_arg : Subtree) (m : BDDModel) : option (Tree) :=
  Subtree_getTreeForZeroOnLinks su_arg (@allModelLinks _ _ m).
Fixpoint Subtree_getTreeForOneOnLinks (su_arg : Subtree) (l : list BDDMetamodel_ELink) : option (Tree) :=
match l with
| (Build_BDDMetamodel_ELink SubtreeTreeForOneEReference (BuildSubtreeTreeForOne Subtree_ctr treeForOne_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some treeForOne_ctr else Subtree_getTreeForOneOnLinks su_arg l'
| _ :: l' => Subtree_getTreeForOneOnLinks su_arg l'
| nil => None
end.

Definition Subtree_getTreeForOne (su_arg : Subtree) (m : BDDModel) : option (Tree) :=
  Subtree_getTreeForOneOnLinks su_arg (@allModelLinks _ _ m).


Definition BDDMetamodel_defaultInstanceOfEClass (bdec_arg: BDDMetamodel_EClass) : (BDDMetamodel_getTypeByEClass bdec_arg) :=
  match bdec_arg with
  | BDDEClass => 
  (BuildBDD "" "")
  | PortEClass => 
  (BuildPort "" "")
  | InputPortEClass => 
  (BuildInputPort (BuildPort "" "") "")
  | OutputPortEClass => 
  (BuildOutputPort (BuildPort "" "") "")
  | TreeEClass => 
  (BuildTree "")
  | LeafEClass => 
  (BuildLeaf (BuildTree "") "")
  | AssignmentEClass => 
  (BuildAssignment "" true)
  | SubtreeEClass => 
  (BuildSubtree (BuildTree "") "")
  end.

(* Typeclass Instance *)
Instance BDDMetamodel : Metamodel BDDMetamodel_EObject BDDMetamodel_ELink BDDMetamodel_EClass BDDMetamodel_EReference :=
  {
    denoteModelClass := BDDMetamodel_getTypeByEClass;
    denoteModelReference := BDDMetamodel_getTypeByEReference;
    toModelClass := BDDMetamodel_toEClass;
    toModelReference := BDDMetamodel_toEReference;
    toModelElement := BDDMetamodel_toEObjectOfEClass;
    toModelLink := BDDMetamodel_toELinkOfEReference;
    bottomModelClass := BDDMetamodel_defaultInstanceOfEClass;

    (* Theorems *)
    eqModelClass_dec := BDDMetamodel_eqEClass_dec;
    eqModelReference_dec := BDDMetamodel_eqEReference_dec;

    (* Constructors *)
    BuildModelElement := Build_BDDMetamodel_EObject;
    BuildModelLink := Build_BDDMetamodel_ELink;
  }.
  
(* Useful lemmas *)
Lemma BDD_invert : 
  forall (bdec_arg: BDDMetamodel_EClass) (t1 t2: BDDMetamodel_getTypeByEClass bdec_arg), Build_BDDMetamodel_EObject bdec_arg t1 = Build_BDDMetamodel_EObject bdec_arg t2 -> t1 = t2.
Proof.
  intros.
  inversion H.
  apply inj_pair2_eq_dec in H1.
  exact H1.
  apply BDDMetamodel_eqEClass_dec.
Qed.
